const explanation = {
  testMethodAndPurpose: (
    <>
      <h3>主なテスト方法とその目的</h3>
      <table>
        <thead>
          <tr>
            <th>テスト方法</th>
            <th>テストの目的</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>スクリプトテスト</td>
            <td>
              仕様通りに動作することを網羅的に確認し、一定の品質を保証する。
            </td>
          </tr>
          <tr>
            <td>アドホックテスト</td>
            <td>
              効率よくテストを行い、たとえ設計書に不備があっても大切な動作を確認できる。
            </td>
          </tr>
          <tr>
            <td>モンキーテスト</td>
            <td>
              設計担当者や開発担当者の意図を考慮しない操作をすることで、想定していなかった思わぬ欠陥を見つける。
            </td>
          </tr>
          <tr>
            <td>カバレッジテスト</td>
            <td>ソースコードを網羅的にテストすることで、欠陥を減少させる。</td>
          </tr>
          <tr>
            <td>受入テスト</td>
            <td>システムが期待通りに動作し、要件を満たすことを確認する。</td>
          </tr>
          <tr>
            <td>本稼働判定</td>
            <td>
              システムを本稼働させた場合のリスクをステークホルダーに示して判断してもらう。
            </td>
          </tr>
        </tbody>
      </table>
    </>
  ),

  qaQcQms: (
    <>
      <h3>
        QA（品質保証）、QC（品質管理）、QMS（品質マネジメントシステム）の説明と関係性
      </h3>

      <h4>1. QA（Quality Assurance：品質保証）</h4>
      <p>
        QAは、製品やサービスが所定の品質要求を満たすことを「保証」するための体系的な活動を指します。
        <br />
        プロセス中心であり、品質を作り込む仕組みや体制そのものの信頼性を担保します。
        <br />
        例：開発プロセスの標準化、監査、教育訓練など。
      </p>

      <h4>2. QC（Quality Control：品質管理）</h4>
      <p>
        QCは、製品やサービスそのものの品質を「管理」し、基準を満たすようにする活動です。
        <br />
        結果中心であり、検査やテストなどを通じて不具合の発見や修正を行います。
        <br />
        例：単体テスト、製品検査、バグの記録と修正など。
      </p>

      <h4>3. QMS（Quality Management System：品質マネジメントシステム）</h4>
      <p>
        QMSは、組織全体として品質を管理・改善するための枠組みや仕組みを指します。
        <br />
        QAやQCの活動もQMSの構成要素に含まれ、品質方針や目標の設定、文書管理、継続的改善（PDCA）などを含みます。
        <br />
        例：ISO 9001のような国際的な品質マネジメント規格。
      </p>
    </>
  ),

  errorDefectFailure: (
    <>
      <h3>エラー（Error）</h3>
      <p>
        人間による誤りを指します。たとえば、プログラマがソースコードを記述する際に論理的な間違いをしてしまうことなどが該当します。
        エラーはソフトウェアの設計、実装、または要件定義の段階で発生することがあります。
      </p>

      <h3>欠陥（Defect）</h3>
      <p>
        エラーが原因となってソフトウェアの中に生じた不具合です。バグ（Bug）とも呼ばれます。
        実装されたソフトウェアの仕様や期待される動作と異なる状態が「欠陥」となります。
      </p>

      <h3>故障（Failure）</h3>
      <p>
        欠陥のあるソフトウェアを実行した際に、期待された結果と異なる動作をした場合に「故障」となります。
        ユーザーが実際に遭遇する障害や異常動作を指します。
      </p>

      <h3>三者の関係</h3>
      <p>一般的に、以下のような因果関係があります：</p>
      <ul>
        <li>
          人間の <strong>エラー（Error）</strong> により、ソフトウェア内に
          <strong>欠陥（Defect）</strong> が作り込まれる
        </li>
        <li>
          その <strong>欠陥（Defect）</strong> が実行時に表面化すると、
          <strong>故障（Failure）</strong> となる
        </li>
      </ul>
    </>
  ),

  sevenPrinciplesOfTest: (
    <>
      <h3>テストの7原則</h3>
      <ol>
        <li>テストは欠陥があることは示せるが、欠陥がないことは示せない</li>
        <li>全数テストは不可能</li>
        <li>早期テストで時間とコストを節約</li>
        <li>欠陥の偏在</li>
        <li>テストの弱化</li>
        <li>テストはコンテキスト次第</li>
        <li>「欠陥ゼロ」の落とし穴</li>
      </ol>
    </>
  ),

  testProcesses: (
    <>
      <h3>テストフェーズの概要</h3>
      <table>
        <thead>
          <tr>
            <th>テストフェーズ</th>
            <th>概要</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>テスト計画</td>
            <td>
              テスト活動の目的、アプローチ、リソース、スケジュール、責任分担、リスク、および成果物を定義し、テスト活動の全体像を明確にするフェーズ。
            </td>
          </tr>
          <tr>
            <td>テストのモニタリングとコントロール</td>
            <td>
              テストの進捗を評価し、テスト計画との差異を確認する。必要に応じて計画の調整を行うことで、目標達成を支援する。
            </td>
          </tr>
          <tr>
            <td>テスト分析</td>
            <td>
              テストのベース（要件、設計仕様など）を確認し、テスト対象とする条件や項目、テスト設計技法の適用範囲を特定するプロセス。
            </td>
          </tr>
          <tr>
            <td>テスト設計</td>
            <td>
              テスト条件に基づき、具体的なテストケースとテストデータを設計し、カバレッジ達成のための構造を整えるフェーズ。
            </td>
          </tr>
          <tr>
            <td>テスト実装</td>
            <td>
              テスト手順やテストスクリプトを作成し、テスト環境のセットアップやテストデータの準備を完了させるフェーズ。
            </td>
          </tr>
          <tr>
            <td>テスト実行</td>
            <td>
              計画されたテストケースを実行し、実際の結果を取得・記録する。異常があれば障害報告を行い、再テストも実施する。
            </td>
          </tr>
          <tr>
            <td>テスト完了</td>
            <td>
              全てのテスト活動を終結させ、成果物を整理・文書化する。テストの目的が達成されたことを確認し、改善点をレビューする。
            </td>
          </tr>
        </tbody>
      </table>
    </>
  ),

  outputOfTest: (
    <>
      <h3>代表的なテスト成果物の用語とその説明</h3>
      <table>
        <thead>
          <tr>
            <th>用語</th>
            <th>説明</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>
              テストウェア
              <br />
              (Testware)
            </td>
            <td>
              テストに関係するすべての成果物をまとめた総称。
              <br />
              テストケース、テストスクリプト、テストデータ、テスト環境、テストツールの設定ファイルなどが含まれる。
            </td>
          </tr>
          <tr>
            <td>
              テストスウィート
              <br />
              (Test Suite)
            </td>
            <td>
              関連するテストケースやテストスクリプトをグループ化した集合。
              <br />
              特定の目的や観点に基づいて実行順序などが整理されている。
            </td>
          </tr>
          <tr>
            <td>
              テストハーネス
              <br />
              (Test Harness)
            </td>
            <td>
              テストを自動実行するための支援ソフトウェアやスクリプトの集合。
              <br />
              テストドライバ、スタブ、テスト管理ツールなどを含むことがある。
            </td>
          </tr>
          <tr>
            <td>
              テストオラクル
              <br />
              (Test Oracle)
            </td>
            <td>
              テスト結果が期待通りかどうかを判断するための手段や仕組み。
              <br />
              期待結果を出す関数や、仕様・参照データ・旧システムなどが使われる。
            </td>
          </tr>
        </tbody>
      </table>
    </>
  ),

  agileSdlcModels: (
    <>
      <h3>アジャイルに関連するソフトウェア開発ライフサイクル（SDLC）モデル</h3>
      <table>
        <thead>
          <tr>
            <th>モデル名</th>
            <th>概要</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>インクリメンタル開発モデル</td>
            <td>
              システムを複数の機能単位に分割し、それぞれを順番に開発・追加していくモデル。
              <br />
              各増分（インクリメント）はテストとリリースを経て製品に統合され、段階的に機能が増えていく。
            </td>
          </tr>
          <tr>
            <td>イテレーティブ開発モデル</td>
            <td>
              初期バージョンを早期に構築し、その後、改善や再設計を繰り返して品質や機能を高めていくモデル。
              <br />
              繰り返し（イテレーション）ごとに学習とフィードバックを取り入れることが特徴。
            </td>
          </tr>
          <tr>
            <td>統一プロセス（RUPなど）</td>
            <td>
              イテレーティブかつインクリメンタルな開発アプローチを採用し、フェーズごとに目的と成果物が明確化されている。
              <br />
              主に4つのフェーズ（開始・精緻化・構築・移行）に分かれて進行する。
            </td>
          </tr>
          <tr>
            <td>スパイラルモデル</td>
            <td>
              リスク駆動型のイテレーティブ開発モデルであり、リスク分析、開発、評価のサイクルを繰り返す。
              <br />
              各サイクルごとに設計や実装の精度を高め、徐々に完成形に近づけていく。
            </td>
          </tr>
        </tbody>
      </table>
    </>
  ),

  reviewTypes: (
    <>
      <h3>レビュー技法の種類と概要（JSTQBシラバス準拠）</h3>
      <table>
        <thead>
          <tr>
            <th>レビュー技法</th>
            <th>分類</th>
            <th>概要</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>ピアレビュー</td>
            <td rowSpan={4}>非形式的</td>
            <td>
              同じチームや役割の同僚同士で行うレビュー。手順や記録がなく、柔軟な形式で行われる。
            </td>
          </tr>
          <tr>
            <td>バディチェック</td>
            <td>
              レビュアーと作成者が1対1で行う簡易的なレビュー。手軽に実施できるが記録は基本残さない。
            </td>
          </tr>
          <tr>
            <td>ペアリング</td>
            <td>
              2人が同じPCで交互に作業・確認を行いながら開発するスタイル。レビューというより共同行為に近い。
            </td>
          </tr>
          <tr>
            <td>ペアレビュー</td>
            <td>
              作成者とレビュアーが協力しながら作業内容をレビューする方法。ペアリングよりはレビュー色が強い。
            </td>
          </tr>
          <tr>
            <td>ウォークスルー</td>
            <td rowSpan={3}>形式的</td>
            <td>
              作成者が資料を説明し、他メンバーが質問やコメントを行う形式的レビュー。リーダーは不要な場合が多い。
            </td>
          </tr>
          <tr>
            <td>テクニカルレビュー</td>
            <td>
              技術的な品質や仕様の妥当性に重点を置くレビュー。リーダーが進行し、複数の技術者が参加する。
            </td>
          </tr>
          <tr>
            <td>インスペクション</td>
            <td>
              事前に定義された手順・役割・チェックリストを用いて厳密に実施される最も形式的なレビュー技法。
            </td>
          </tr>
        </tbody>
      </table>
    </>
  ),

  equivalencePartitioning: (
    <>
      <h3>同値分割法（Equivalence Partitioning）の概要</h3>
      <table>
        <thead>
          <tr>
            <th>区分</th>
            <th>説明</th>
            <th>例</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>有効同値パーティション</td>
            <td>
              入力値のうち、有効（妥当）とみなされる範囲をグループ化したもの。
              <br />
              仕様上問題なく受け入れられる入力の範囲を代表値でテストする。
            </td>
            <td>年齢入力で「0〜120歳」の範囲など</td>
          </tr>
          <tr>
            <td>無効同値パーティション</td>
            <td>
              入力値のうち、無効（不正）とみなされる範囲をグループ化したもの。
              <br />
              不正入力を代表する値を使って、異常系の動作を確認する。
            </td>
            <td>年齢入力で「-1」「130」など</td>
          </tr>
        </tbody>
      </table>
    </>
  ),
};

export default [
  // ---------------- 問題1 ----------------
  {
    question: (
      <>
        <p>次のテストの目的に合致するテスト方法として、適切なものを選べ</p>
        <blockquote>
          仕様通りに動作することを網羅的に確認し、一定の品質を保証する。
        </blockquote>
      </>
    ),
    options: [
      "スクリプトテスト",
      "アドホックテスト",
      "モンキーテスト",
      "カバレッジテスト",
      "受入テスト",
    ],
    answer: 0,
    explanation: explanation.testMethodAndPurpose,
    aiGenerated: false,
    type: "single",
  },

  // ---------------- 問題2 ----------------
  {
    question: (
      <>
        <p>次のテストの目的に合致するテスト方法として、適切なものを選べ</p>
        <blockquote>
          効率よくテストを行い、たとえ設計書に不備があっても大切な動作を確認できる。
        </blockquote>
      </>
    ),
    options: [
      "スクリプトテスト",
      "アドホックテスト",
      "モンキーテスト",
      "カバレッジテスト",
      "受入テスト",
    ],
    answer: 1,
    explanation: explanation.testMethodAndPurpose,
    aiGenerated: false,
    type: "single",
  },

  // ---------------- 問題3 ----------------
  {
    question: (
      <>
        <p>次のテストの目的に合致するテスト方法として、適切なものを選べ</p>
        <blockquote>
          設計担当者や開発担当者の意図を考慮しない操作をすることで、想定していなかった思わぬ欠陥を見つける。
        </blockquote>
      </>
    ),
    options: [
      "スクリプトテスト",
      "アドホックテスト",
      "モンキーテスト",
      "受入テスト",
      "本稼働判定",
    ],
    answer: 2,
    explanation: explanation.testMethodAndPurpose,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題4 ----------------
  {
    question: (
      <>
        <p>次のテストの目的に合致するテスト方法として、適切なものを選べ</p>
        <blockquote>
          ソースコードを網羅的にテストすることで、欠陥を減少させる。
        </blockquote>
      </>
    ),
    options: [
      "スクリプトテスト",
      "アドホックテスト",
      "カバレッジテスト",
      "モンキーテスト",
      "受入テスト",
    ],
    answer: 2,
    explanation: explanation.testMethodAndPurpose,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題5 ----------------
  {
    question: (
      <>
        <p>次のテストの目的に合致するテスト方法として、適切なものを選べ</p>
        <blockquote>
          システムが期待通りに動作し、要件を満たすことを確認する。
        </blockquote>
      </>
    ),
    options: [
      "スクリプトテスト",
      "カバレッジテスト",
      "モンキーテスト",
      "受入テスト",
      "本稼働判定",
    ],
    answer: 3,
    explanation: explanation.testMethodAndPurpose,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題6 ----------------
  {
    question: (
      <>
        <p>次のテストの目的に合致するテスト方法として、適切なものを選べ</p>
        <blockquote>
          システムを本稼働させた場合のリスクをステークホルダーに示して判断してもらう。
        </blockquote>
      </>
    ),
    options: [
      "アドホックテスト",
      "カバレッジテスト",
      "モンキーテスト",
      "受入テスト",
      "本稼働判定",
    ],
    answer: 4,
    explanation: explanation.testMethodAndPurpose,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題7 ----------------
  {
    question: (
      <>
        <p>テストとデバッグに関する記述として、適切なものを2つ選べ</p>
      </>
    ),
    options: [
      "テストは欠陥を見つける作業だが、デバッグはテスト前にプログラムを動作させることを言う",
      "テストもデバッグも、欠陥を見つけるための作業である",
      "デバッグより先にテストを行う必要がある",
      "ウォーターフォール開発モデルでは、各フェース毎にデバッグを行うが、テストはまとめて行う",
      "アジャイル開発モデルでは、繰り返しテストを行うことが好ましい",
    ],
    answer: [1, 4],
    explanation: (
      <>
        <p>
          デバッグとは、プログラム中の欠陥を取り除くことを意味する。
          一方、テストは主に欠陥を発見するための作業であり、目的や担当者、実施タイミングが異なる。
          デバッグは開発中に開発者が行い、テストは完成した機能に対してテスト担当者が行うことが一般的である。
        </p>
        <p>
          アジャイル開発ではスプリントごとに繰り返しテストが行われ、継続的な品質保証のために重要な要素となる。
          テスト自動化を積極的に取り入れることが推奨される。
        </p>
      </>
    ),
    aiGenerated: false,
    type: "multiple",
  },

  // ---------------- 問題8 ----------------
  {
    question: (
      <>
        <p>
          製品やサービスが所定の品質要求を満たすことを「保証」するための体系的な活動を何というか。
          <br />
          アルファベットで答えよ。
        </p>
      </>
    ),
    answer: ["QA", "qa"],
    explanation: explanation.qaQcQms,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題9 ----------------
  {
    question: (
      <>
        <p>
          製品やサービスそのものの品質を「管理」し、基準を満たすようにする活動を何というか。
          <br />
          アルファベットで答えよ。
        </p>
      </>
    ),
    answer: ["QC", "qc"],
    explanation: explanation.qaQcQms,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題10 ----------------
  {
    question: (
      <>
        <p>
          組織全体として品質を管理・改善するための枠組みや仕組みを何というか。
          <br />
          アルファベットで答えよ。
        </p>
      </>
    ),
    answer: ["QMS", "qms"],
    explanation: explanation.qaQcQms,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題11 ----------------
  {
    question: (
      <>
        <p>
          次のQA、QC、QMSに関する記述として、<strong>適切でないもの</strong>
          を1つ選べ。
        </p>
      </>
    ),
    options: [
      "QAは、プロセスの品質を確保するための活動である。",
      "QCは、製品やサービスそのものの品質を検証する活動である。",
      "QMSは、QCとQAを含めた品質管理活動全体の枠組みである。",
      "QCは、開発プロセスの標準化や教育訓練などを含む活動である。",
      "QAは、QMSの一部である。",
    ],
    answer: 3,
    explanation: explanation.qaQcQms,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題12 ----------------
  {
    question: (
      <>
        <p>QA、QC、QMSの関係として、適切なものを2つ選べ。</p>
      </>
    ),
    options: [
      "QAは、QMSの構成要素の1つである。",
      "QCは、QMSの一部ではなく独立して行われる活動である。",
      "QMSは、品質目標の設定や文書管理などの枠組みを含む。",
      "QCは、プロセスの標準化や監査などを含む活動である。",
      "QAは、完成した製品の欠陥を検出するための活動である。",
    ],
    answer: [0, 2],
    explanation: explanation.qaQcQms,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題13 ----------------
  {
    question: (
      <>
        <p>次の説明にあてはまるものとして、適切なものを選べ</p>
        <blockquote>人間による誤りを指す</blockquote>
      </>
    ),
    options: ["エラー", "欠陥", "故障", "障害"],
    answer: 0,
    explanation: explanation.errorDefectFailure,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題14 ----------------
  {
    question: (
      <>
        <p>次の説明にあてはまるものとして、適切なものを選べ</p>
        <blockquote>ソフトウェアの中に生じた不具合を指す</blockquote>
      </>
    ),
    options: ["エラー", "欠陥", "故障", "障害"],
    answer: 1,
    explanation: explanation.errorDefectFailure,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題15 ----------------
  {
    question: (
      <>
        <p>次の説明にあてはまるものとして、適切なものを選べ</p>
        <blockquote>
          ソフトウェアが期待された結果と異なる動作をすることを指す
        </blockquote>
      </>
    ),
    options: ["エラー", "欠陥", "故障", "障害"],
    answer: 2,
    explanation: explanation.errorDefectFailure,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題16 ----------------
  {
    question: (
      <>
        <p>エラー、欠陥、故障の関係として、適切なものを2つ選べ。</p>
      </>
    ),
    options: [
      "エラーが原因で欠陥が生じ、欠陥が原因で故障が発生する。",
      "故障が原因で欠陥が埋め込まれ、欠陥が原因でエラーが発生する。",
      "エラーと故障は同義であるが、欠陥とは異なる。",
      "人間のエラーによって欠陥が生じ、欠陥が実行時に故障として表れる。",
      "故障が発生した場合、その原因は常にエラーである。",
    ],
    answer: [0, 3],
    explanation: explanation.errorDefectFailure,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題17 ----------------
  {
    question: (
      <>
        <p>「テストの7原則」に当てはまらないものを選べ。</p>
      </>
    ),
    options: [
      "テストは欠陥があることは示せるが、欠陥がないことは示せない",
      "全数テストは不可能",
      "まとめてテストを行うことで時間とコストを節約",
      "欠陥の偏在",
    ],
    answer: 2,
    explanation: explanation.sevenPrinciplesOfTest,
    aiGenerated: false,
    type: "single",
  },

  // ---------------- 問題18 ----------------
  {
    question: (
      <>
        <p>「テストの7原則」に当てはまらないものを選べ。</p>
      </>
    ),
    options: [
      "テストは欠陥があることは示せるが、欠陥がないことは示せない",
      "テストの弱化",
      "組織で一貫したテストポリシーを定める",
      "「欠陥ゼロ」の落とし穴",
    ],
    answer: 2,
    explanation: explanation.sevenPrinciplesOfTest,
    aiGenerated: false,
    type: "single",
  },

  // ---------------- 問題19 ----------------
  {
    question: (
      <>
        <p>
          以下の記述のうち、「テストの7原則」に基づいて
          <strong>適切でないものを</strong>2つ選べ。
        </p>
      </>
    ),
    options: [
      "テストはどれだけ行っても、ソフトウェアに欠陥がないことを証明することはできない",
      "すべての入力値と分岐条件を網羅することで、全数テストは可能である",
      "バグは開発初期段階に集中していることが多く、重点的にテストすべきである",
      "テスト対象のコンテキストによって、テストの進め方や重視すべき点は変わる",
      "テストにより大量の欠陥を検出して修正すれば、システムは正しく構築される",
    ],
    answer: [1, 4],
    explanation: explanation.sevenPrinciplesOfTest,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題20 ----------------
  {
    question: (
      <>
        <p>次のうち、「テストの7原則」の考え方に合致するものを2つ選べ。</p>
      </>
    ),
    options: [
      "できるだけ後半にテストを集中させた方が、まとめて効率的に検証できる",
      "テストを続ければ続けるほど、新しいバグの発見率は高くなる",
      "全数テストは非現実的なので、リスクに応じてテスト範囲を絞るべきである",
      "「テストでバグが1件も出なかった」=「システムにバグがない」と言える",
      "特定の箇所に欠陥が集中していることがあるため、過去のバグ履歴も参考にすべきである",
    ],
    answer: [2, 4],
    explanation: explanation.sevenPrinciplesOfTest,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題21 ----------------
  {
    question: (
      <>
        <p>
          テストプロセス、テスト活動、タスクの関係について、適切なものを2つ選べ。
        </p>
      </>
    ),
    options: [
      "テストプロセスは、1つの大きなタスクで構成される",
      "テストプロセスは、複数のテスト活動で構成される",
      "テスト活動は、複数のタスクで構成される",
      "タスクは、複数のテスト活動で構成される",
      "テストプロセスとタスクの間に上下の関係性は存在しない",
    ],
    answer: [1, 2],
    explanation: (
      <>
        <p>テストプロセス、テスト活動、タスクの関係は次の通りである</p>
        <ul>
          <li>テストプロセスは、複数のテスト活動で構成される</li>
          <li>1つのテスト活動は、複数の個別のタスクで構成される</li>
        </ul>
      </>
    ),
    aiGenerated: false,
    type: "multiple",
  },

  // ---------------- 問題22 ----------------
  {
    question: (
      <>
        <p>
          以下の事例AとBは、それぞれ「テストモニタリング」と「テストコントロール」のどちらに該当すると言えるか、適切な組み合わせを選べ。
        </p>
        <ul>
          <li>
            <b>事例A</b>:
            テスト担当者が病欠したことにより、テスト計画通りに進捗が出ていないことを確認する
          </li>
          <li>
            <b>事例B</b>:
            不具合発生数のメトリクスを確認し、想定よりも不具合が発生しているため、修正担当者を増員する
          </li>
        </ul>
      </>
    ),
    options: [
      "事例A=「テストモニタリング」、事例B=「テストモニタリング」",
      "事例A=「テストモニタリング」、事例B=「テストコントロール」",
      "事例A=「テストコントロール」、事例B=「テストモニタリング」",
      "事例A=「テストコントロール」、事例B=「テストコントロール」",
    ],
    answer: 1,
    explanation: (
      <>
        <h3>テストモニタリング</h3>
        <p>テストの進捗などのメトリクスを確認し、テスト計画と比較する作業</p>
        <h3>テストコントロール</h3>
        <p>
          テストモニタリングの結果を受け、計画通りテストを進めるようリカバリーを講じる作業
        </p>
      </>
    ),
    aiGenerated: false,
    type: "single",
  },

  // ---------------- 問題23 ----------------
  {
    question: (
      <>
        <p>以下の説明に該当するテストプロセスを答えよ。</p>
        <blockquote>
          テスト活動の目的、アプローチ、リソース、スケジュール、責任分担、リスク、および成果物を定義し、テスト活動の全体像を明確にするフェーズ。
        </blockquote>
      </>
    ),
    answer: ["テスト計画"],
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題24 ----------------
  {
    question: (
      <>
        <p>以下の説明に該当するテストプロセスを答えよ。</p>
        <blockquote>
          テストの進捗を評価し、テスト計画との差異を確認する。必要に応じて計画の調整を行うことで、目標達成を支援する。
        </blockquote>
      </>
    ),
    answer: [
      "テストのモニタリングとコントロール",
      "モニタリングとコントロール",
    ],
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題25 ----------------
  {
    question: (
      <>
        <p>以下の説明に該当するテストプロセスを答えよ。</p>
        <blockquote>
          テストのベース（要件、設計仕様など）を確認し、テスト対象とする条件や項目、テスト設計技法の適用範囲を特定するプロセス。
        </blockquote>
      </>
    ),
    answer: ["テスト分析"],
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題26 ----------------
  {
    question: (
      <>
        <p>以下の説明に該当するテストプロセスを答えよ。</p>
        <blockquote>
          テスト条件に基づき、具体的なテストケースとテストデータを設計し、カバレッジ達成のための構造を整えるフェーズ。
        </blockquote>
      </>
    ),
    answer: ["テスト設計"],
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題27 ----------------
  {
    question: (
      <>
        <p>以下の説明に該当するテストプロセスを答えよ。</p>
        <blockquote>
          テスト手順やテストスクリプトを作成し、テスト環境のセットアップやテストデータの準備を完了させるフェーズ。
        </blockquote>
      </>
    ),
    answer: ["テスト実装"],
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題28 ----------------
  {
    question: (
      <>
        <p>以下の説明に該当するテストプロセスを答えよ。</p>
        <blockquote>
          計画されたテストケースを実行し、実際の結果を取得・記録する。異常があれば障害報告を行い、再テストも実施する。
        </blockquote>
      </>
    ),
    answer: ["テスト実行"],
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題29 ----------------
  {
    question: (
      <>
        <p>以下の説明に該当するテストプロセスを答えよ。</p>
        <blockquote>
          全てのテスト活動を終結させ、成果物を整理・文書化する。テストの目的が達成されたことを確認し、改善点をレビューする。
        </blockquote>
      </>
    ),
    answer: ["テスト完了"],
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "text",
  },

  // ---------------- 問題30 ----------------
  {
    question: (
      <>
        <p>次のうち、「テスト計画」に関する説明として適切なものを選べ。</p>
      </>
    ),
    options: [
      "テストの進捗を可視化するため、メトリクスを収集し分析する活動である",
      "テスト対象の要件や仕様をもとに、テスト条件を特定する活動である",
      "テスト活動の目的やスケジュール、リソースを定義する活動である",
      "テスト手順やテストスクリプトを作成し、テスト環境を構築する活動である",
      "テスト結果を記録し、障害報告を行う活動である",
    ],
    answer: 2,
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題31 ----------------
  {
    question: (
      <>
        <p>次のうち、「テスト分析」に関する説明として適切なものを選べ。</p>
      </>
    ),
    options: [
      "テスト活動の目的、リスク、スケジュールを策定する活動である",
      "テスト対象の情報を基に、テストすべき条件や項目を明確にする活動である",
      "テストケースに必要なデータやスクリプトを作成する活動である",
      "テスト結果を集計し、成果物として報告書を作成する活動である",
      "テストの進捗を管理し、状況に応じて計画を変更する活動である",
    ],
    answer: 1,
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題32 ----------------
  {
    question: (
      <>
        <p>次のうち、「テスト完了」に関する説明として適切なものを選べ。</p>
      </>
    ),
    options: [
      "テストを実行し、障害を記録・報告する活動である",
      "テスト環境の構築やテストデータの準備を行う活動である",
      "要件に基づき、テストケースを設計する活動である",
      "テスト成果物を整理し、今後の改善点を振り返る活動である",
      "テスト条件を明確化し、対象範囲を特定する活動である",
    ],
    answer: 3,
    explanation: explanation.testProcesses,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題33 ----------------
  {
    question: (
      <>
        <p>「テストウェア」に含まれるものとして適切なものを全て選べ。</p>
      </>
    ),
    options: [
      "テストケース",
      "テストスクリプト",
      "テスト用のサーバー",
      "テストデータ",
      "テスト用の設定ファイル",
    ],
    answer: [0, 1, 2, 3, 4],
    explanation: explanation.outputOfTest,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題34 ----------------
  {
    question: (
      <>
        <p>
          テストの成果物のうち、テストドライバやスタブ、管理ツールなどを包括する意味を持つ用語として、適切なものを選べ
        </p>
      </>
    ),
    options: ["テストスウィート", "テストハーネス", "モック", "テストダブル"],
    answer: 1,
    explanation: explanation.outputOfTest,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題35 ----------------
  {
    question: (
      <>
        <p>テストオラクル（Test Oracle）の説明として、最も適切なものを選べ。</p>
      </>
    ),
    options: [
      "テスト対象が満たすべき要件や仕様を体系的に整理したドキュメント",
      "テスト中に生成されたログや実行結果を記録する仕組み",
      "テストの結果が期待通りであるかどうかを判断するための手段や仕組み",
      "テストケースを自動的に生成するためのツールやアルゴリズム",
    ],
    answer: 2,
    explanation: explanation.outputOfTest,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題36 ----------------
  {
    question: (
      <>
        <p>インクリメンタル開発モデルの特徴として、正しいものを2つ選べ。</p>
      </>
    ),
    options: [
      "機能単位に分割して段階的に開発・リリースを行う。",
      "最初に全体像を完璧に設計してから開発を始める。",
      "各増分は独立していて結合されることはない。",
      "増分ごとにテストと統合を行い、機能を徐々に追加する。",
      "リスク分析に重点を置いて、開発の方向性を決める。",
    ],
    answer: [0, 3],
    explanation: explanation.agileSdlcModels,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題37 ----------------
  {
    question: (
      <>
        <p>イテレーティブ開発モデルの特徴として、正しいものを2つ選べ。</p>
      </>
    ),
    options: [
      "最初の段階で完全な仕様を確定し、以後は変更しない。",
      "初期バージョンを早く作り、以後繰り返し改善していく。",
      "各機能を独立して別々のチームが開発し、最後に統合する。",
      "繰り返しの中で学習やフィードバックを取り入れる。",
      "1回のイテレーションで全機能を網羅することを目的とする。",
    ],
    answer: [1, 3],
    explanation: explanation.agileSdlcModels,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題38 ----------------
  {
    question: (
      <>
        <p>統一プロセス（RUP）の特徴として、正しいものを2つ選べ。</p>
      </>
    ),
    options: [
      "各フェーズごとに明確な目的と成果物が定義されている。",
      "ウォーターフォールモデルと同様に、後戻りは一切しない。",
      "イテレーティブおよびインクリメンタルな要素を含む。",
      "開発はすべて1つのフェーズで完結する。",
      "変更管理を避けるため、設計は最初にすべて完了する。",
    ],
    answer: [0, 2],
    explanation: explanation.agileSdlcModels,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題39 ----------------
  {
    question: (
      <>
        <p>スパイラルモデルの特徴として、正しいものを2つ選べ。</p>
      </>
    ),
    options: [
      "リスク分析を各サイクルの中心に据える。",
      "一度構築したものは変更せず、段階的に積み上げる。",
      "各サイクルで評価・改善を繰り返し、精度を高める。",
      "リリースは最後に一度だけ行う。",
      "最初のサイクルで全機能を開発してから評価に入る。",
    ],
    answer: [0, 2],
    explanation: explanation.agileSdlcModels,
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題40 ----------------
  {
    question: (
      <>
        <p>次の説明として最も適切なものを、ピアレビューの特徴として選べ。</p>
      </>
    ),
    options: [
      "2人が1つのPCで交互に作業する共同作業スタイルである。",
      "同僚同士がカジュアルに行う柔軟なレビュー形式である。",
      "作成者が資料を説明し、他のメンバーが意見を述べる形式的レビューである。",
      "技術的な観点で専門家がレビューを行う手順である。",
    ],
    answer: 1,
    explanation: explanation.reviewTypes,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題41 ----------------
  {
    question: (
      <>
        <p>次の説明として最も適切なものを、バディチェックの特徴として選べ。</p>
      </>
    ),
    options: [
      "形式的に役割を定め、複数人でチェックリストを使って行うレビューである。",
      "レビュアーと作成者が1対1で行う簡易的レビューである。",
      "作成者がドキュメントを読み上げながら進行する形式的なレビューである。",
      "チーム全体でテスト成果物の妥当性を確認する最終レビューである。",
    ],
    answer: 1,
    explanation: explanation.reviewTypes,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題42 ----------------
  {
    question: (
      <>
        <p>ペアリングの特徴として、最も適切なものを選べ。</p>
      </>
    ),
    options: [
      "レビューリーダーが進行し、コメントや質問を通して品質を確認する。",
      "2人が一緒に交代で開発とレビューを行う共同作業形式である。",
      "書類ベースで実施され、事前に資料を配布する必要がある。",
      "レビュアーが作成者の成果物をチェックし、問題点を記録する。",
    ],
    answer: 1,
    explanation: explanation.reviewTypes,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題43 ----------------
  {
    question: (
      <>
        <p>ペアレビューの特徴として、最も適切なものを選べ。</p>
      </>
    ),
    options: [
      "作成者が中心となって資料を説明することで進行する。",
      "テスト観点からの仕様の妥当性確認に重点を置くレビューである。",
      "作成者とレビュアーが協力してレビューを進める非形式的レビューである。",
      "リスク分析を中心としたアーキテクチャレビューを行う形式である。",
    ],
    answer: 2,
    explanation: explanation.reviewTypes,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題44 ----------------
  {
    question: (
      <>
        <p>ウォークスルーの特徴として、最も適切なものを選べ。</p>
      </>
    ),
    options: [
      "技術的な観点での評価が主目的で、専門家のみで実施する。",
      "リーダーが指名され、チェックリストに基づいてレビューを行う。",
      "作成者が説明し、参加者が質問や指摘を行う形式的なレビューである。",
      "チーム全員で交互にソースコードを記述する方式である。",
    ],
    answer: 2,
    explanation: explanation.reviewTypes,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題45 ----------------
  {
    question: (
      <>
        <p>テクニカルレビューの特徴として、最も適切なものを選べ。</p>
      </>
    ),
    options: [
      "仕様の妥当性や技術的な観点を重視した形式的レビューである。",
      "個人で行い、記録を残さず口頭で指摘を行う。",
      "ソースコードの品質ではなく、成果物のデザインに焦点を当てる。",
      "レビューというよりも共同開発に近い形で行われる。",
    ],
    answer: 0,
    explanation: explanation.reviewTypes,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題46 ----------------
  {
    question: (
      <>
        <p>インスペクションの特徴として、最も適切なものを選べ。</p>
      </>
    ),
    options: [
      "成果物の品質を簡易的に確認する柔軟なレビュー形式である。",
      "ペアで開発しながらリアルタイムで指摘を行う作業形式である。",
      "定義された手順や役割に従って厳密に実施する最も形式的なレビューである。",
      "形式的ではあるが、参加者は自由に意見を述べ合う非構造的レビューである。",
    ],
    answer: 2,
    explanation: explanation.reviewTypes,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題47 ----------------
  {
    question: (
      <>
        <p>
          年齢を入力するフィールドがあり、仕様では0歳以上120歳以下の整数が有効であるとする。
          <br />
          このとき、有効・無効の同値パーティションを考慮したときに、代表値で必要なテストケース数はいくつか。
        </p>
      </>
    ),
    options: ["1", "2", "3", "4"],
    answer: 2,
    explanation: (
      <>
        <ul>
          <li>有効パーティション：1つ（0〜120） → 代表値1つ</li>
          <li>無効パーティション：2つ（0未満、120より大きい）→ 代表値2つ</li>
        </ul>
        <p>
          合計で<strong>3つのテストケース</strong>が必要となる。
        </p>
      </>
    ),
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題48 ----------------
  {
    question: (
      <>
        <p>サイコロを1回振ったとき、以下のような処理を行うゲームがある：</p>
        <ul>
          <li>出た目が 1 または 2 のとき： 「スライムが現れた」</li>
          <li>出た目が 3 または 4 のとき： 「宝箱を発見した」</li>
          <li>出た目が 5 または 6 のとき： 「何も起こらなかった」</li>
        </ul>
        <p>
          この仕様に対して、同値分割法に基づき代表値でテストする場合、必要なテストケース数として最も適切なものを選べ。
        </p>
      </>
    ),
    options: ["3", "4", "5", "6"],
    answer: 1,
    explanation: (
      <>
        <p>同値パーティションの分類は以下の通り：</p>
        <ul>
          <li>{"有効パーティション①：{1, 2}（代表値：1）"}</li>
          <li>{"有効パーティション②：{3, 4}（代表値：3）"}</li>
          <li>{"有効パーティション③：{5, 6}（代表値：5）"}</li>
          <li>無効パーティション：それ以外（例：0, 7など）→ 代表値：0</li>
        </ul>
        <p>
          よって、代表値ベースで<strong>4つのテストケース</strong>が必要となる。
        </p>
      </>
    ),
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題49 ----------------
  {
    question: (
      <>
        <p>
          静的テストに関する記述として、<strong>正しいものを2つ</strong>選べ。
        </p>
      </>
    ),
    options: [
      "静的テストは、ソフトウェアを実行せずに行うテスト技法である。",
      "静的テストにはテストケースの実行が含まれる。",
      "コードレビューは静的テストの一種である。",
      "静的テストはブラックボックステストの一部である。",
      "静的テストは常に動的テストより精度が高い。",
    ],
    answer: [0, 2],
    explanation: (
      <>
        静的テストはソフトウェアを実行せずに検査を行う技法であり、レビューや静的解析などが含まれる。
      </>
    ),
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題50 ----------------
  {
    question: (
      <>
        <p>次のうち、構造ベースのテスト技法に該当するものをすべて選べ。</p>
      </>
    ),
    options: [
      "判定条件カバレッジ",
      "同値分割法",
      "ブランチカバレッジ",
      "状態遷移テスト",
      "ステートメントカバレッジ",
    ],
    answer: [0, 2, 4],
    explanation: (
      <>
        構造ベースのテストではコードの内部構造を分析し、ブランチやステートメントの網羅を確認する。
      </>
    ),
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題51 ----------------
  {
    question: (
      <>
        <p>経験ベースのテスト技法に該当するものとして、適切なものを2つ選べ。</p>
      </>
    ),
    options: [
      "状態遷移テスト",
      "エラー推測法",
      "探索的テスト",
      "決定表テスト",
      "境界値分析",
    ],
    answer: [1, 2],
    explanation: (
      <>
        経験ベースのテストでは、過去の不具合や直感を活用してテストケースを設計する。代表例は探索的テストとエラー推測法。
      </>
    ),
    aiGenerated: true,
    type: "multiple",
  },

  // ---------------- 問題52 ----------------
  {
    question: (
      <>
        <p>
          状態遷移テストが<strong>特に有効</strong>
          とされる対象として、適切なものを選べ。
        </p>
      </>
    ),
    options: [
      "機能の分岐が少ない単純な計算処理",
      "複数の入力値が独立しているケース",
      "前の動作に依存する処理が含まれるシステム",
      "バッチ処理や定期的な集計",
    ],
    answer: 2,
    explanation: (
      <>
        状態遷移テストは、システムの現在の状態に応じて挙動が変わるような場面に有効である。
      </>
    ),
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題53 ----------------
  {
    question: (
      <>
        <p>テストツールに関する記述として、適切なものを2つ選べ。</p>
      </>
    ),
    options: [
      "静的解析ツールは、プログラムを実行してバグを検出する。",
      "テスト管理ツールは、テストケースや障害の進捗を管理する。",
      "バグトラッキングツールは、コードの静的品質を検証するツールである。",
      "CIツールと連携することで、テストの自動実行が可能になる。",
      "テスト実行ツールは、テスト計画の策定に使用される。",
    ],
    answer: [1, 3],
    explanation: (
      <>
        CI連携によりテストの自動化が進み、テスト管理ツールは進捗や欠陥の記録に役立つ。
      </>
    ),
    aiGenerated: true,
    type: "multiple",
  },
];
