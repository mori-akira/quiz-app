export const explanation = {
  testProcessTasks: (
    <>
      <h3>第1章 テストプロセスにおけるテストアナリストのタスク</h3>

      <h4>1.2 ソフトウェア開発ライフサイクルにおけるテスト</h4>
      <p>
        テストアナリストは、選択されたソフトウェア開発ライフサイクルモデル（SDLC）に応じて、テスト活動への関与タイミングや方法を調整する必要がある。
        V字モデルでは要件仕様に基づく設計と検証が明確だが、アジャイル開発ではより柔軟な対応と頻繁なコミュニケーションが求められる。
      </p>

      <h4>1.3 テスト分析</h4>
      <p>
        テスト分析では、テストベース（要件、設計書など）を分析し、テスト条件を識別・優先順位付けする。
        プロダクトリスクを考慮し、ステークホルダーとレビューしながら網羅的なテスト条件を導出することが重要である。
      </p>

      <h4>1.4 テスト設計</h4>
      <p>
        テスト設計では、識別したテスト条件に対して適切なテストケースを作成する。
        ハイレベルテストケース（抽象度高い）とローレベルテストケース（具体的詳細な）を使い分ける。
        また、必要なテストデータや環境も設計し、テスト目的・期待結果・事前条件・事後条件を明確にする。
      </p>

      <h4>1.5 テスト実装</h4>
      <p>
        テスト実装では、テスト実行に向けてテスト手順やスイートを整理し、環境やデータを準備する。
        テストケースの優先順位付けや実行順序を最適化し、効率的なテスト実行計画を作成することが求められる。
      </p>

      <h4>1.6 テスト実行</h4>
      <p>
        テスト実行では、手動・自動テストを実施し、期待結果との比較、欠陥報告、トレーサビリティの更新を行う。
        テスト進行中に新たなリスクの発見や、実装成果物へのフィードバックも行う。
      </p>
    </>
  ),

  riskBasedTesting: (
    <>
      <h3>第2章 リスクベースドテストにおけるテストアナリストのタスク</h3>

      <h4>2.1 リスクベースドテスト概要</h4>
      <p>
        テストマネージャーが全体を管理する一方で、テストアナリストはリスクベースドテスト（RBT）の実務面に積極的に関与する。
        リスク識別・リスクアセスメント・リスク軽減策の提案をSDLC全体を通して繰り返し行うことが求められる。
      </p>

      <h4>2.2 リスク識別</h4>
      <p>
        リスク識別では、可能な限り多様なステークホルダーと連携して、システムに内在するリスクを洗い出す。
        ビジネスドメインに特有のリスク（機能正確性、使用性、移植性など）に着目し、チェックリストや過去プロジェクトの経験も活用する。
      </p>

      <h4>2.3 リスクアセスメント</h4>
      <p>
        識別したリスクに対して、「発生可能性」と「影響度」を評価し、リスクレベルを判定する。
        ビジネス損失や社会的信用への影響など、ビジネス的観点も重視する。
        可能性×影響のマトリクスにより、リスクの優先順位を決める。
      </p>

      <h4>2.4 リスク軽減</h4>
      <p>
        高リスク領域を中心に、明確な合否基準を持つテストケースを設計し、プロダクトリスクを低減する。
        リスクレベルに応じたテスト優先順位付け（depth-first探索やbreadth-first探索）も行う。
        テスト進行中にも新たなリスクの発見やリスク再評価を継続的に行う。
      </p>
    </>
  ),

  specificationBasedTechniques: (
    <>
      <h3>第3章 仕様ベーステクニック</h3>

      <h4>3.1 仕様ベーステクニック概要</h4>
      <p>
        仕様ベーステクニック（ブラックボックステクニック）は、システムやコンポーネントの内部構造を考慮せず、仕様書や要件からテストケースを導出するアプローチである。
        入力と出力の関係に着目し、システムの外部振る舞いを検証する。
      </p>

      <h4>3.2 同値クラステスト</h4>
      <p>
        同値クラステストでは、入力や出力の値域を意味的に等価なグループ（同値クラス）に分割し、それぞれから代表値を選んでテストする。
        有効同値クラスと無効同値クラスを区別し、無駄なくテスト網羅性を高める。
      </p>

      <h4>3.3 境界値分析</h4>
      <p>
        境界値分析は、エラーが発生しやすい境界付近の値を重点的にテストするテクニックである。
        最小値、最大値、境界直前、境界直後、典型値を考慮する。
      </p>

      <h4>3.4 決定表テスト</h4>
      <p>
        決定表テストは、複数の条件とそれに対応するアクションの関係を整理し、テストケースを体系的に導出するテクニックである。
        条件組み合わせの完全網羅や、不要な組み合わせの除外が目的となる。
      </p>

      <h4>3.5 状態遷移テスト</h4>
      <p>
        状態遷移テストは、システムの状態とイベントの組み合わせによる動作をモデル化し、状態遷移図または状態遷移表に基づいてテストケースを導出するテクニックである。
        正常遷移だけでなく、不正な遷移（例：無効イベント）もテストする。
      </p>

      <h4>3.6 ケース分割設計</h4>
      <p>
        ケース分割設計は、複雑なシステム動作を単純なケース（入力条件やパラメータの組み合わせ）に分解し、それぞれについてテストするアプローチである。
        データドリブンなテスト設計にも応用される。
      </p>
    </>
  ),

  experienceBasedTechniques: (
    <>
      <h3>第4章 経験ベース・チェックリストベーステクニック</h3>

      <h4>4.1 経験ベーステクニック概要</h4>
      <p>
        経験ベーステクニックは、テスト担当者の知識、スキル、過去の経験に基づいてテストケースを導出する手法である。
        システム仕様が不完全だったり、変更が頻繁に発生する場合に有効であり、探索的テストやエラービーシングテストなどが含まれる。
      </p>

      <h4>4.2 エラービーシングテスト</h4>
      <p>
        エラービーシングテストは、過去に発見された欠陥や典型的な誤りパターンに着目し、それらを模倣するテストケースを作成する手法である。
        頻出するミスを意図的に狙うことで、効果的に欠陥を発見することを目的とする。
      </p>

      <h4>4.3 探索的テスト</h4>
      <p>
        探索的テストは、テスト設計とテスト実行を並行して行いながら、システムを自由に探求していくアプローチである。
        テスト設計に制約されず、その場で得た知見をもとに次のテストを決定する。
        スクリプト型テストと併用されることも多い。
      </p>

      <h4>4.4 チェックリストベーステクニック</h4>
      <p>
        チェックリストベーステクニックは、あらかじめ用意したチェックリストに基づき、各項目を検証することでテストを行う手法である。
        項目の網羅性を高めるとともに、経験者によるレビューや知識の継承にも有効である。
      </p>
    </>
  ),

  review: (
    <>
      <h3>第5章 レビュー</h3>

      <h4>5.1 レビューにおけるテストアナリストの役割</h4>
      <p>
        テストアナリストは、仕様書、ユーザーストーリー、契約、テスト設計仕様書、テストケースなどの成果物をレビュー対象とし、主にビジネス要件や使用性、機能的適合性、アクセシビリティに関する欠陥を特定する役割を担う。
      </p>

      <h4>5.2 レビュープロセス</h4>
      <p>
        効果的なレビューには、事前準備（ドキュメントの配布、レビュー手順の定義）、レビュー実施（欠陥の特定、記録、議論）、レビュー後処理（欠陥修正、改善活動）を含む。
      </p>

      <h4>5.3 レビューテクニック</h4>
      <p>
        チェックリストベースのレビューでは、事前に作成したリストに従って欠陥を検出する。アドホックレビューは自由な形式で行われるが、経験とスキルが要求される。
        他に、パースペクティブベースドレビュー（特定の観点からレビューする方法）もある。
      </p>

      <h4>5.4 欠陥カテゴリ</h4>
      <p>
        欠陥は、文法・用語ミス、あいまいさ、欠落、矛盾、不適切な仮定などのカテゴリに分類できる。
        テストアナリストはこれらのパターンを理解し、効果的に欠陥を見つける。
      </p>

      <h4>5.5 レビュー技法の適用</h4>
      <p>
        レビュー技法の適用は、対象成果物やリスク、目的に応じて選択される。
        例として、要件仕様書にはチェックリストベースドレビュー、ユーザーストーリーにはパースペクティブベースドレビューなどが推奨される。
      </p>
    </>
  ),

  testToolsAndAutomation: (
    <>
      <h3>第6章 テストツールとテスト自動化</h3>

      <h4>6.1 テストツールと自動化の概要</h4>
      <p>
        テストツールと自動化は、テストプロセスの効率向上、品質改善、コスト削減を目的として利用される。
        テストアナリストは、目的に合ったツールを選定し、効果的な活用を支援する役割を担う。
      </p>

      <h4>6.2 テストツールの分類と使用目的</h4>
      <p>
        テストツールには、テスト管理ツール、静的分析ツール、テスト設計支援ツール、テスト実行ツール、性能テストツールなどがある。
        各ツールは特定のテスト活動や品質特性に対応している。
      </p>

      <h4>6.3 テストツール導入における成功要因</h4>
      <p>
        テストツール導入の成功には、明確な目標設定、プロセスの整備、パイロット導入による検証、継続的な改善が必要である。
        ツール選定は短期的な効果だけでなく、長期的な適合性も考慮する。
      </p>

      <h4>6.4 テスト自動化の考慮事項</h4>
      <p>
        テスト自動化を検討する際には、ROI（投資対効果）、メンテナンスコスト、ツールの適用範囲、対象の安定性などを考慮する必要がある。
        すべてを自動化するのではなく、効果的な領域に絞ることが重要である。
      </p>

      <h4>6.5 テストアナリストの自動化に対する役割</h4>
      <p>
        テストアナリストは、テスト自動化の目的を明確にし、スクリプト設計支援、テストデータ準備、自動化戦略策定に貢献する。
        また、適切なテスト対象の選定にも関与する。
      </p>
    </>
  ),
};

export default [
  // ---------------- 問題1 ----------------
  {
    question: (
      <>
        <p>
          ウォーターフォール型SDLCにおいて、テストアナリストが関与する最も適切なタイミングはどれか？
        </p>
      </>
    ),
    options: [
      "コーディング完了後に初めて関与する",
      "要件定義の開始時点から関与する",
      "リリース直前に関与する",
      "運用保守フェーズから関与する",
    ],
    answer: 1,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題2 ----------------
  {
    question: (
      <>
        <p>
          アジャイル開発におけるテストアナリストの特徴として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "すべてのテスト作業をリリース直前に集中させる",
      "仕様変更に応じず初期計画を厳格に守る",
      "開発初期から密なコミュニケーションをとりながらテストに関与する",
      "詳細なテストドキュメントの作成を最優先する",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題3 ----------------
  {
    question: (
      <>
        <p>
          V字モデルにおいて、テスト計画の開始タイミングとして適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "コーディング開始後",
      "システム設計完了後",
      "プロジェクト計画と並行して開始する",
      "運用フェーズに入った後",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題4 ----------------
  {
    question: (
      <>
        <p>テスト分析活動において、最初に確認すべき開始基準はどれか？</p>
      </>
    ),
    options: [
      "テストデータがすべて作成済みである",
      "テスト対象の知識体系（テストベース）が存在している",
      "テスト担当者がすべてアサインされている",
      "欠陥報告ツールが導入されている",
    ],
    answer: 1,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題5 ----------------
  {
    question: (
      <>
        <p>
          テストアナリストがテスト条件を識別する際、考慮すべき最も重要な情報源はどれか？
        </p>
      </>
    ),
    options: [
      "プロジェクトのコスト制約",
      "開発メンバーの趣味趣向",
      "テスト対象のテストベース",
      "テストツールの導入有無",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題6 ----------------
  {
    question: (
      <>
        <p>
          リスクベースドテストにおいて、テストアナリストが果たす役割として適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "プロジェクト全体の進捗管理",
      "ビジネスリスクを考慮したテスト条件の優先順位付け",
      "インフラ環境の構築",
      "テスト自動化フレームワークの開発",
    ],
    answer: 1,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題7 ----------------
  {
    question: (
      <>
        <p>
          テスト設計時に、ハイレベルテストケースの特徴として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "詳細な手順まで明記する",
      "自動テストのスクリプトを含む",
      "抽象度が高く、柔軟なテスト実行を可能にする",
      "必ずしも期待結果を定義しない",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題8 ----------------
  {
    question: (
      <>
        <p>ローレベルテストケースの短所として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "詳細が不足し、再現性に欠ける",
      "作成・メンテナンスに労力がかかる",
      "テスト対象の理解を深めやすい",
      "テスト担当者に高い経験が求められる",
    ],
    answer: 1,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題9 ----------------
  {
    question: (
      <>
        <p>テスト設計時に考慮すべき事項として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "合格/不合格基準を曖昧にする",
      "テスト実行者が自由に判断できる余地を残す",
      "期待結果を明確に定義する",
      "テスト環境に依存せずに設計する",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題10 ----------------
  {
    question: (
      <>
        <p>テスト設計時に必要な「事後条件」とは何を指すか？</p>
      </>
    ),
    options: [
      "テスト実行後のシステムの望ましい状態",
      "テスト開始前の環境準備状態",
      "テスト完了後のレポート提出期限",
      "テスト計画策定時に決める終了基準",
    ],
    answer: 0,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題11 ----------------
  {
    question: (
      <>
        <p>テスト実装時に行うべき作業のうち、最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "テスト完了報告書の作成",
      "テスト手順やスイートの整理",
      "欠陥管理ツールの導入検討",
      "リスク分析の再実施",
    ],
    answer: 1,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題12 ----------------
  {
    question: (
      <>
        <p>
          テスト実行スケジュールを作成する際、優先すべき要素として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "テスト対象の可用性",
      "開発者の都合",
      "運用部門の意向",
      "社内規定に従うだけでよい",
    ],
    answer: 0,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題13 ----------------
  {
    question: (
      <>
        <p>
          テストアナリストが実施する「テスト手順の最適化」で考慮すべき点として正しいものはどれか？
        </p>
      </>
    ),
    options: [
      "同じデータセットを複数のテストで共有する",
      "全テストを順番に1件ずつ必ず実施する",
      "必ず最も難しいテストから始める",
      "実行順は気にせず自由にする",
    ],
    answer: 0,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題14 ----------------
  {
    question: (
      <>
        <p>テスト環境に関する記述のうち、最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "本番環境と完全に一致していなくても問題ない",
      "テスト目的に応じて「目的にかなった環境」を準備する必要がある",
      "テスト環境は毎回違っていてもよい",
      "開発者個人のPCをテスト環境にしても問題ない",
    ],
    answer: 1,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題15 ----------------
  {
    question: (
      <>
        <p>
          テスト実行時に新たなリスクを発見した場合、テストアナリストが行うべき行動はどれか？
        </p>
      </>
    ),
    options: [
      "無視して予定通りテストを進める",
      "上長にだけ非公式に報告する",
      "リスクを記録し、関係者に正式に報告する",
      "開発者にだけ口頭で伝える",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題16 ----------------
  {
    question: (
      <>
        <p>
          リスクベースドテスト（RBT）において、テストアナリストの役割として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "リスクマネジメント全体の責任を負う",
      "リスク識別、アセスメント、軽減策提案に関与する",
      "テスト自動化ツールの開発を主導する",
      "開発プロセス全体を統括する",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題17 ----------------
  {
    question: (
      <>
        <p>リスク識別活動において、最も重視すべき観点はどれか？</p>
      </>
    ),
    options: [
      "開発チーム内だけで完結する",
      "過去の不具合だけに焦点を当てる",
      "多様なステークホルダーから広く情報を集める",
      "スケジュール遵守を最優先する",
    ],
    answer: 2,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題18 ----------------
  {
    question: (
      <>
        <p>リスク識別に有効な情報源として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "ビジネス要件",
      "チームビルディングワークショップ",
      "テスト終了報告書",
      "ソースコードだけ",
    ],
    answer: 0,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題19 ----------------
  {
    question: (
      <>
        <p>
          テストアナリストがプロダクトリスクを識別する際、特に着目すべき品質特性はどれか？
        </p>
      </>
    ),
    options: [
      "移植性、使用性、性能効率",
      "製品価格、納期、売上高",
      "開発プロセスのスピード",
      "社内政治的な要因",
    ],
    answer: 0,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題20 ----------------
  {
    question: (
      <>
        <p>リスクアセスメントで使用される指標「影響度」とは、何を示すか？</p>
      </>
    ),
    options: [
      "リスクが顕在化する可能性の高さ",
      "リスクが発生した場合のビジネスへのダメージの大きさ",
      "テストケースの実行時間",
      "開発者のスキルレベル",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題21 ----------------
  {
    question: (
      <>
        <p>
          リスクアセスメントにおいて、「発生可能性」と「影響度」の両方を考慮して決定されるものはどれか？
        </p>
      </>
    ),
    options: [
      "テストスケジュール",
      "リスクレベル",
      "バグ修正コスト",
      "顧客満足度",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題22 ----------------
  {
    question: (
      <>
        <p>リスクベースドテストのメリットとして最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "すべての機能を網羅的にテストできる",
      "最も重要な部分にテストリソースを集中できる",
      "テスト計画作成を不要にできる",
      "バグ発見率が常に100%になる",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題23 ----------------
  {
    question: (
      <>
        <p>以下のうち、リスク軽減策として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "リスクが高い領域に対して重点的なテストを実施する",
      "すべてのリスクを無視してテスト対象を決める",
      "リスクが低い領域から優先的にテストする",
      "リスクに関係なくテスト対象をランダムに選択する",
    ],
    answer: 0,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題24 ----------------
  {
    question: (
      <>
        <p>
          リスクベースドテスト実施中に新たなリスクが発見された場合、最も適切な対応はどれか？
        </p>
      </>
    ),
    options: [
      "既存リスクを優先し、新しいリスクは無視する",
      "リスクアセスメントを更新し、必要に応じてテスト計画を修正する",
      "開発チームにのみ非公式に伝える",
      "リスクの発見を報告する必要はない",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題25 ----------------
  {
    question: (
      <>
        <p>
          リスク優先度の高い領域に対して、テストケースを設計する際に重要なポイントはどれか？
        </p>
      </>
    ),
    options: [
      "広範囲に浅くテストする",
      "できるだけ少ないテストケースで済ませる",
      "失敗条件を厳密に設計し、欠陥を検出しやすくする",
      "開発者の意向だけでテスト内容を決める",
    ],
    answer: 2,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題26 ----------------
  {
    question: (
      <>
        <p>
          リスクレベルが低い領域に対するテストの特徴として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "詳細なテストを徹底的に行う",
      "リスクに応じてテストの粒度を下げる",
      "必ずすべての組み合わせテストを実施する",
      "リスクレベルに関係なくテスト内容を固定する",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題27 ----------------
  {
    question: (
      <>
        <p>リスク識別の活動で適切なものはどれか？</p>
      </>
    ),
    options: [
      "テストケース設計前にリスク識別を終えておく",
      "リスク識別はテスト実施後に行う",
      "リスク識別はテストチームだけで秘密裏に行う",
      "リスク識別は開発フェーズ終了後にまとめて実施する",
    ],
    answer: 0,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題28 ----------------
  {
    question: (
      <>
        <p>
          リスクベースドテストにおける「影響度が高く、発生可能性も高い」リスクへの対応として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "最優先でテストを集中する",
      "無視してリリースを優先する",
      "発生可能性が低いので後回しにする",
      "ユーザーへの告知だけで対応する",
    ],
    answer: 0,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題29 ----------------
  {
    question: (
      <>
        <p>
          リスクアセスメントにおける定量的アプローチの特徴として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "主観的な印象に基づく",
      "数値や測定結果を用いて客観的に評価する",
      "経験則だけに依存する",
      "リスク評価は不要とする",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題30 ----------------
  {
    question: (
      <>
        <p>
          リスク軽減のためにテスト設計段階で行うべき対応として適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "テスト実施時にリスク軽減を考える",
      "合否基準があいまいなテストケースを作成する",
      "リスクレベルに応じてテストケースの優先順位を付ける",
      "リスクが低い領域を最優先でテストする",
    ],
    answer: 2,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題31 ----------------
  {
    question: (
      <>
        <p>
          リスク優先順位に基づくテストの実施順序を決める際、適切な戦略はどれか？
        </p>
      </>
    ),
    options: [
      "リスクが低い領域から順番にテストする",
      "リスクの高い領域から優先的にテストを開始する",
      "テスト対象をランダムに選ぶ",
      "納期に近い機能からテストする",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題32 ----------------
  {
    question: (
      <>
        <p>
          リスクベースドテストにおいて、テスト計画を柔軟に見直すべきタイミングはどれか？
        </p>
      </>
    ),
    options: [
      "リスクレベルが変化した場合",
      "テストチームの人数が増えた場合",
      "開発チームの要望があった場合",
      "バグの数が予定より少なかった場合",
    ],
    answer: 0,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題33 ----------------
  {
    question: (
      <>
        <p>リスクベースドテストの考え方に最も合致するものはどれか？</p>
      </>
    ),
    options: [
      "テストは全領域を平等に行うべきである",
      "リスクに応じてテストの重点を変えるべきである",
      "テストはプロジェクト後半にまとめて実施するべきである",
      "リスク評価は開発者に任せるべきである",
    ],
    answer: 1,
    explanation: explanation.riskBasedTesting,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題34 ----------------
  {
    question: (
      <>
        <p>仕様ベーステクニックの特徴として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "プログラム内部構造に基づいてテストケースを設計する",
      "仕様書や要件に基づいてテストケースを設計する",
      "プログラマの経験則だけでテストケースを設計する",
      "運用マニュアルに基づいてテストケースを設計する",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題35 ----------------
  {
    question: (
      <>
        <p>
          同値クラステストにおいて、無効同値クラスの説明として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "有効な入力範囲内に属する値のグループ",
      "仕様上受け入れられる入力を表す",
      "仕様違反やエラーとなる入力を表す",
      "テスト対象外の入力値群",
    ],
    answer: 2,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題36 ----------------
  {
    question: (
      <>
        <p>
          同値クラステストにおいて、無効同値クラスが適切にテストできる理由として正しいものはどれか？
        </p>
      </>
    ),
    options: [
      "同値クラスごとに多数の値をテストする必要がある",
      "一つの代表値をテストすればクラス全体をカバーできる",
      "すべての異なる値をテストする必要がある",
      "入力値の順序を必ず変える必要がある",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題37 ----------------
  {
    question: (
      <>
        <p>境界値分析でテストすべき値として適切なものはどれか？</p>
      </>
    ),
    options: [
      "最小値と最大値だけ",
      "境界値そのもの、およびその直前・直後の値",
      "テスト対象外の範囲の値",
      "ランダムに選んだ値",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題38 ----------------
  {
    question: (
      <>
        <p>
          あるシステムで、1～100までの数値を入力として受け付ける場合、境界値分析において選択すべきテストデータはどれか？
        </p>
      </>
    ),
    options: ["0, 1, 2, 99, 100, 101", "1, 50, 100", "0, 50, 101", "1, 100"],
    answer: 0,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題39 ----------------
  {
    question: (
      <>
        <p>決定表テストの主な目的として適切なものはどれか？</p>
      </>
    ),
    options: [
      "ソースコードの網羅率を高める",
      "条件とアクションの関係を整理し、抜け漏れを防ぐ",
      "単体テストを省略する",
      "開発コストを削減する",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題40 ----------------
  {
    question: (
      <>
        <p>
          決定表において、条件が3つ存在する場合、理論上何通りの組み合わせが存在するか？
        </p>
      </>
    ),
    options: ["3通り", "6通り", "8通り", "9通り"],
    answer: 2,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題41 ----------------
  {
    question: (
      <>
        <p>
          状態遷移テストにおいて、注目すべき観点として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "プログラムの内部ループ構造",
      "状態とイベントの組み合わせによる動作",
      "データベースの物理構造",
      "ユーザーインターフェースの美しさ",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題42 ----------------
  {
    question: (
      <>
        <p>
          状態遷移テストにおいて、不正遷移をテストする目的として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "システムが期待通りに異常終了するか確認する",
      "ユーザーインターフェースを改善する",
      "負荷性能を測定する",
      "コーディングスタイルの遵守を確認する",
    ],
    answer: 0,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題43 ----------------
  {
    question: (
      <>
        <p>状態遷移テストにおいて、「状態カバレッジ」とは何を意味するか？</p>
      </>
    ),
    options: [
      "すべての入力データの組み合わせをテストする",
      "すべての到達可能な状態を少なくとも一度は通過する",
      "すべてのプログラム分岐を網羅する",
      "すべてのユーザーインターフェース要素をテストする",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題44 ----------------
  {
    question: (
      <>
        <p>ケース分割設計の特徴として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "個々のケースに対して独立したテスト設計を行う",
      "テスト対象をブラックボックスとして無視する",
      "仕様変更には対応しない設計手法である",
      "入力値に関係なく一律のテストを実施する",
    ],
    answer: 0,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題45 ----------------
  {
    question: (
      <>
        <p>データドリブンなテスト設計において、最も重要な考え方はどれか？</p>
      </>
    ),
    options: [
      "すべての処理ロジックをハードコードする",
      "異なる入力データに対して同じテスト手順を繰り返す",
      "テスト対象ごとに専用のプログラムを書く",
      "テストデータを手作業で一件ずつ入力する",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題46 ----------------
  {
    question: (
      <>
        <p>同値クラステストと境界値分析の違いとして最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "同値クラステストはエラーが発生しやすい境界を重視する",
      "境界値分析は内部ロジックに着目する",
      "同値クラステストは代表値に基づく、境界値分析は境界付近を重点的にテストする",
      "両者は全く同じ手法である",
    ],
    answer: 2,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題47 ----------------
  {
    question: (
      <>
        <p>
          あるシステムで「年齢が18歳以上なら購入可能」と定義されている場合、境界値分析に基づきテストすべき値の組み合わせとして最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "17歳、18歳、19歳",
      "16歳、18歳、20歳",
      "18歳、25歳、30歳",
      "0歳、50歳、100歳",
    ],
    answer: 0,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題48 ----------------
  {
    question: (
      <>
        <p>
          決定表テストにおいて、条件が4つある場合、すべての組み合わせを網羅するには何通りのテストケースが必要か？
        </p>
      </>
    ),
    options: ["8通り", "12通り", "16通り", "24通り"],
    answer: 2,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題49 ----------------
  {
    question: (
      <>
        <p>
          状態遷移テストにおいて、イベントドリブン型のシステムに対して特に有効な理由として適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "すべての入力データを検証できる",
      "システム内のイベントと状態変化の組み合わせを体系的に検証できる",
      "開発者の作業負荷を軽減できる",
      "GUIデザインの改善に直結する",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題50 ----------------
  {
    question: (
      <>
        <p>仕様ベーステクニックの適用において、最も注意すべき点はどれか？</p>
      </>
    ),
    options: [
      "内部実装を考慮せず、仕様書の内容に基づいて設計する",
      "プログラム内部のバグを直接探す",
      "すべての仕様を無視して実装ベースでテスト設計する",
      "テスト設計では常にホワイトボックス技法を優先する",
    ],
    answer: 0,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題51 ----------------
  {
    question: (
      <>
        <p>仕様ベーステクニックを使用する最大の目的はどれか？</p>
      </>
    ),
    options: [
      "コード品質を直接評価する",
      "仕様や要件に基づくシステムの正確な動作を検証する",
      "開発プロセスの効率化を図る",
      "ユーザーインターフェースのデザイン品質を評価する",
    ],
    answer: 1,
    explanation: explanation.specificationBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題52 ----------------
  {
    question: (
      <>
        <p>経験ベーステクニックの特徴として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "仕様に厳密に従ってテストする",
      "開発者の意図を無視してテストする",
      "テスト担当者の知識や経験に基づいてテストする",
      "テスト対象をランダムに選んでテストする",
    ],
    answer: 2,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題53 ----------------
  {
    question: (
      <>
        <p>エラービーシングテストの目的として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "未知のリスクを特定する",
      "開発者のコーディングスタイルを改善する",
      "過去に発生した典型的な欠陥を意図的に狙う",
      "バグをすべて修正する",
    ],
    answer: 2,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題54 ----------------
  {
    question: (
      <>
        <p>エラービーシングテストにおいて有効な情報源はどれか？</p>
      </>
    ),
    options: [
      "開発者の自己申告",
      "過去の障害記録や不具合データベース",
      "最新のマーケティングレポート",
      "ユーザーインタビューだけ",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題55 ----------------
  {
    question: (
      <>
        <p>探索的テストの特徴として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "事前にすべてのテスト手順を厳密に設計する",
      "テスト設計と実行を並行して進める",
      "テスト実施前にすべてのテストデータを確定させる",
      "テスト実施後に必ず詳細な報告書を作成する",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題56 ----------------
  {
    question: (
      <>
        <p>探索的テストにおける「チャータ」とは何を指すか？</p>
      </>
    ),
    options: [
      "テスト終了後の総括レポート",
      "テスト実施前に設計された仕様書",
      "探索的テストを進める際のテスト目的・スコープ・指針",
      "システム設計ドキュメント",
    ],
    answer: 2,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題57 ----------------
  {
    question: (
      <>
        <p>探索的テストのメリットとして最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "変更に柔軟に対応できる",
      "テスト結果を予測しやすい",
      "全仕様を網羅できる",
      "計画外のテストを完全に排除できる",
    ],
    answer: 0,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題58 ----------------
  {
    question: (
      <>
        <p>チェックリストベーステクニックの主な目的はどれか？</p>
      </>
    ),
    options: [
      "プログラムの内部構造を網羅する",
      "抜け漏れなく必要な観点を確認する",
      "探索的に未知のバグを発見する",
      "プロジェクトの納期を短縮する",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題59 ----------------
  {
    question: (
      <>
        <p>
          チェックリストベーステストにおいて、チェックリスト作成時に最も重視すべきことはどれか？
        </p>
      </>
    ),
    options: [
      "可能な限りすべての組み合わせを列挙する",
      "経験に基づき重要な項目を抽出する",
      "仕様に書かれていない事項を無視する",
      "チェックリスト項目数を最小限に抑える",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題60 ----------------
  {
    question: (
      <>
        <p>
          チェックリストベーステクニックの適用場面として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "仕様が完全に確定しているプロジェクトのみ",
      "テスト観点の抜け漏れリスクが高い場合",
      "テスト対象が存在しない場合",
      "テストチームが未経験者だけの場合",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題61 ----------------
  {
    question: (
      <>
        <p>探索的テストを実施する際に特に必要とされるスキルはどれか？</p>
      </>
    ),
    options: [
      "厳格な仕様理解能力",
      "即興的なテスト設計力と分析力",
      "コードリーディング能力",
      "テストツール開発能力",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題62 ----------------
  {
    question: (
      <>
        <p>エラービーシングテストが特に効果を発揮する場面はどれか？</p>
      </>
    ),
    options: [
      "新規開発で前例のない機能をテストする場合",
      "過去に似た不具合が多発している領域をテストする場合",
      "自動テストツールだけで検証する場合",
      "ユーザーインターフェースのデザイン評価を行う場合",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題63 ----------------
  {
    question: (
      <>
        <p>探索的テストとスクリプト型テストの併用が有効になる理由はどれか？</p>
      </>
    ),
    options: [
      "探索的テストの自由度とスクリプト型テストの安定性を補完できるから",
      "スクリプト型テストだけでバグをすべて発見できるから",
      "探索的テストに厳格な事前計画が必要だから",
      "どちらの手法も本番環境でしか使用できないから",
    ],
    answer: 0,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題64 ----------------
  {
    question: (
      <>
        <p>チェックリストを使用したテストにおける主なリスクはどれか？</p>
      </>
    ),
    options: [
      "チェックリストに書かれている項目以外を見落とす可能性",
      "テストの自由度が高すぎること",
      "仕様変更に自動的に対応できること",
      "欠陥が絶対に見つからないこと",
    ],
    answer: 0,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題65 ----------------
  {
    question: (
      <>
        <p>経験ベーステクニックの最大の利点はどれか？</p>
      </>
    ),
    options: [
      "テスト設計の自由度が制限される",
      "過去の知識を活用し、未知の問題を早期に発見できる",
      "テスト手順を固定化できる",
      "すべての仕様を網羅的に検証できる",
    ],
    answer: 1,
    explanation: explanation.experienceBasedTechniques,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題66 ----------------
  {
    question: (
      <>
        <p>
          テストアナリストがレビュー対象とする成果物として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "開発者のソースコードのみ",
      "テスト設計仕様書やユーザーストーリー",
      "リリース後の運用マニュアル",
      "テストツールのマニュアル",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題67 ----------------
  {
    question: (
      <>
        <p>レビューにおけるテストアナリストの主な関心事はどれか？</p>
      </>
    ),
    options: [
      "プログラムのパフォーマンス最適化",
      "ビジネス要件や使用性に関する欠陥の検出",
      "コードのリファクタリング提案",
      "システム設計の自動化",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題68 ----------------
  {
    question: (
      <>
        <p>
          レビューの事前準備段階で行うべき作業として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "欠陥の修正",
      "レビュー手順の定義と対象成果物の配布",
      "テスト環境のセットアップ",
      "欠陥修正後の再レビュー実施",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題69 ----------------
  {
    question: (
      <>
        <p>
          チェックリストベースのレビューの特徴として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "自由な形式で実施する",
      "事前に定義された項目に基づいて確認する",
      "レビュー担当者が個別に判断する",
      "欠陥を無作為に探す",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題70 ----------------
  {
    question: (
      <>
        <p>アドホックレビューの特徴として正しいものはどれか？</p>
      </>
    ),
    options: [
      "あらかじめチェックリストに基づいて実施する",
      "自由な形式で行い、実施者の経験に依存する",
      "事前にレビュー計画を厳密に立てる",
      "レビューの対象範囲を限定する",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題71 ----------------
  {
    question: (
      <>
        <p>
          パースペクティブベースドレビューにおいて、特定の観点（パースペクティブ）とは何を意味するか？
        </p>
      </>
    ),
    options: [
      "レビュー対象ドキュメントの物理的構成",
      "ユーザー、開発者、運用者などの異なる立場からの視点",
      "システム全体のデータフロー図",
      "テスト自動化フレームワーク",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題72 ----------------
  {
    question: (
      <>
        <p>以下のうち、欠陥カテゴリに該当するものはどれか？</p>
      </>
    ),
    options: [
      "仕様書のページ数",
      "用語の不統一やあいまいな表現",
      "レビュー会議の参加人数",
      "開発プロジェクトの予算規模",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題73 ----------------
  {
    question: (
      <>
        <p>レビュー活動において、欠陥の「矛盾」とはどのような問題を指すか？</p>
      </>
    ),
    options: [
      "異なるドキュメント間で情報が一致していない",
      "文法的な誤記が存在する",
      "ドキュメントのレイアウトが統一されていない",
      "不要な情報が多すぎる",
    ],
    answer: 0,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題74 ----------------
  {
    question: (
      <>
        <p>
          レビュー技法の適用において、ユーザーストーリーをレビューする際に最も適切な技法はどれか？
        </p>
      </>
    ),
    options: [
      "チェックリストベースドレビュー",
      "パースペクティブベースドレビュー",
      "アドホックレビュー",
      "構造ベースドレビュー",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題75 ----------------
  {
    question: (
      <>
        <p>効果的なレビューの実施において重要な活動はどれか？</p>
      </>
    ),
    options: [
      "欠陥の記録とレビュー後の改善活動",
      "テストコードの自動生成",
      "プロジェクトマネージャによるレビューのみ",
      "レビュー前に欠陥修正を完了すること",
    ],
    answer: 0,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題76 ----------------
  {
    question: (
      <>
        <p>
          レビュー対象成果物に応じてレビュー技法を選択する理由として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "どの成果物も同じ技法でレビューできるため",
      "レビュー技法には対象に応じた強みと弱みがあるため",
      "チェックリストベースドレビューだけですべて十分だから",
      "レビュー技法は標準化されていないため",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題77 ----------------
  {
    question: (
      <>
        <p>パースペクティブベースドレビューの利点として正しいものはどれか？</p>
      </>
    ),
    options: [
      "すべてのドキュメントを一律に確認できる",
      "異なる立場からの多角的な視点で欠陥を発見できる",
      "レビュー実施者の個人差を完全に排除できる",
      "欠陥を自動的に修正できる",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題78 ----------------
  {
    question: (
      <>
        <p>欠陥カテゴリ「欠落」に該当する例として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "必要な要求仕様が文書化されていない",
      "要求仕様の文法ミス",
      "同じ要求が複数箇所で矛盾して記載されている",
      "ユーザーインターフェースのレイアウトが異なる",
    ],
    answer: 0,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題79 ----------------
  {
    question: (
      <>
        <p>
          欠陥パターンの理解がレビュー活動にもたらす効果として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "レビュー作業の速度は遅くなる",
      "特定パターンに偏ったレビューとなる",
      "欠陥を体系的に検出しやすくなる",
      "レビュー対象が増えるため負荷が高まる",
    ],
    answer: 2,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題80 ----------------
  {
    question: (
      <>
        <p>テストアナリストがレビュー後に最も注力すべき活動はどれか？</p>
      </>
    ),
    options: [
      "検出された欠陥の修正作業そのもの",
      "欠陥傾向の分析と、次回以降のレビュー改善活動",
      "レビュー報告書の作成のみ",
      "レビューの実施記録の削除",
    ],
    answer: 1,
    explanation: explanation.review,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題81 ----------------
  {
    question: (
      <>
        <p>テストツールと自動化の主な目的として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "テストコストの増大",
      "テストプロセスの効率化と品質向上",
      "開発期間の短縮のみを目的とする",
      "すべての手作業を排除する",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題82 ----------------
  {
    question: (
      <>
        <p>以下のうち、テスト設計支援ツールに分類されるものはどれか？</p>
      </>
    ),
    options: [
      "静的コード解析ツール",
      "テスト実行ツール",
      "テストケース生成ツール",
      "構成管理ツール",
    ],
    answer: 2,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題83 ----------------
  {
    question: (
      <>
        <p>性能テストツールの使用目的として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "リリースノート作成支援",
      "負荷条件下での応答時間やスループットを測定する",
      "テストプロジェクト管理",
      "バージョン管理の自動化",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題84 ----------------
  {
    question: (
      <>
        <p>テストツール導入において、最初に実施すべきことはどれか？</p>
      </>
    ),
    options: [
      "全社的なツール展開",
      "明確な目標設定とプロセス整備",
      "すぐにすべてのテストを自動化",
      "ツール機能の拡張依頼",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題85 ----------------
  {
    question: (
      <>
        <p>
          テストツール導入時にパイロットプロジェクトを行う目的として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "ツールベンダーとの契約交渉",
      "導入効果と適合性を小規模で検証する",
      "ツールに依存する文化を作る",
      "ツール機能のすべてを網羅的に確認する",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題86 ----------------
  {
    question: (
      <>
        <p>テスト自動化導入時に考慮すべき項目として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "テスト対象の安定性",
      "全テストケースの手動実行記録",
      "人件費の一時的削減のみ",
      "リリース後のレビューコスト",
    ],
    answer: 0,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題87 ----------------
  {
    question: (
      <>
        <p>
          テスト自動化において、ROI（投資対効果）を考慮する理由として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "ツールベンダーを評価するため",
      "自動化導入による費用対効果を判断するため",
      "開発期間を自動的に短縮するため",
      "テスト対象全体をカバーするため",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題88 ----------------
  {
    question: (
      <>
        <p>
          テストアナリストの自動化における役割として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "すべてのテストスクリプトを一人で実装する",
      "自動化対象を選定し、テスト設計支援を行う",
      "ツール開発者に完全に任せる",
      "テスト自動化とは無関係である",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題89 ----------------
  {
    question: (
      <>
        <p>テスト自動化の適用対象として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "頻繁に変更される仕様",
      "一度だけ実行する特殊テスト",
      "繰り返し実行される安定したテストケース",
      "開発初期段階の不安定なモジュール",
    ],
    answer: 2,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題90 ----------------
  {
    question: (
      <>
        <p>テストツール導入で失敗する典型的な原因として適切なものはどれか？</p>
      </>
    ),
    options: [
      "事前に目標を明確に設定している",
      "適用範囲を十分に検討せず導入する",
      "パイロットプロジェクトを経てから本格導入する",
      "導入後に継続的改善を行っている",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題91 ----------------
  {
    question: (
      <>
        <p>
          テストツール選定において短期的効果だけでなく長期的適合性を考慮すべき理由はどれか？
        </p>
      </>
    ),
    options: [
      "ツールベンダーに依存するため",
      "ツールの導入コストが高いため",
      "長期使用時に発生する保守や拡張ニーズに対応するため",
      "ツール選定は気軽に変更できるため",
    ],
    answer: 2,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題92 ----------------
  {
    question: (
      <>
        <p>静的分析ツールの目的として最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "実行時パフォーマンス測定",
      "ソースコードやドキュメントを実行せずに問題点を検出する",
      "テスト実行結果の収集",
      "開発プロセスのスケジュール短縮",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題93 ----------------
  {
    question: (
      <>
        <p>
          テストアナリストが自動化戦略に貢献する場面として最も適切なものはどれか？
        </p>
      </>
    ),
    options: [
      "テスト実行ツールの開発",
      "自動化対象となるテスト領域の特定と優先順位付け",
      "すべてのテストを無差別に自動化する提案",
      "開発チームの作業割り当て管理",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題94 ----------------
  {
    question: (
      <>
        <p>
          テストデータ準備においてテストアナリストが支援できる活動はどれか？
        </p>
      </>
    ),
    options: [
      "テストデータのスクリプト化と自動生成支援",
      "テストデータの手動入力のみ",
      "開発者にすべて任せる",
      "本番データをそのまま使用する提案",
    ],
    answer: 0,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },

  // ---------------- 問題95 ----------------
  {
    question: (
      <>
        <p>テスト自動化に関する次の記述のうち、最も適切なものはどれか？</p>
      </>
    ),
    options: [
      "すべてのテストを自動化すべきである",
      "自動化の効果を得るためには対象の選別が重要である",
      "自動化は導入直後からROIが最大化される",
      "テストアナリストは自動化には関与しない",
    ],
    answer: 1,
    explanation: explanation.testToolsAndAutomation,
    aiGenerated: true,
    type: "single",
  },
];
