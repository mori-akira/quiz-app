export const explanation = {
  // 1章
  testProcessTasks: {
    testInSDLC: `
### 1.2 ソフトウェア開発ライフサイクルにおけるテスト

テスト戦略はSDLC全体を考慮すべきであり、テストアナリストの関与のタイミング、関与の程度、時間、情報、及び期待も異なる。
テストアナリストは他の関連組織に提供する情報も把握する必要がある。
提供先と提供する情報は以下の通り。

- 要求エンジニアリングおよびマネジメント - 要件レビューのフィードバック
- プロジェクトマネジメント - スケジュールに対する入力
- 構成管理および変更管理 - ビルド検証テストの結果、バージョンコントロールの情報
- ソフトウェア開発 - 検出された欠陥の通知
- ソフトウェアメンテナンス - 欠陥レポート、欠陥除去効率、確認テスト
- テクニカルサポート - 正確に文書化した回避策および既知の問題
- テクニカルドキュメント作成（例えば、データベース設計仕様、テスト環境ドキュメント） - これらのドキュメントへの入力とドキュメントのテクニカルレビュー

テスト活動は選択したSDLCと整合する必要がある。
例えば、シーケンシャルなV字モデルにおいて、テストプロセスをシステムテストレベルに適用すると、次のように整理できる。

- プロジェクト計画と同時にシステムテスト計画を始め、テスト完了までテストモニタリングとテストコントロールを継続する。これは、プロジェクトマネジメントの目的でテストアナリストが提供するスケジュールに影響する。
- システムテストのテスト分析およびテスト設計は、システム要件仕様、システムおよびアーキテクチャー（ハイレベル）設計仕様、およびコンポーネント（ローレベル）設計仕様などのドキュメントに沿って行う。
- システムテスト環境の実装は、システム設計時に開始する場合があるものの、その大部分は、コーディングおよびコンポーネントテストと同時に開始するのが常であり、システムテストの実行開始数日前までシステムテスト実装への取り組みが続いてしまうことが多い。
- システムテストの実行は、テストの開始基準を満たした（または必要に応じて免除された）ときに始まる。これは最低でもコンポーネントテストと多くの場合はコンポーネント統合テストも終了基準を満たしていることを意味する。システムテストの実行は、システムテスト終了基準を満たすまで継続する。
- システムテストの完了活動は、システムテスト終了基準を満たした後に実行する。

イテレーティブモデルやインクリメンタルモデルでは、活動を異なる順で実行したり、一部の活動を除外することがある。

アジャイルソフトウェア開発では、あまり形式ばらないプロセスが使用され、ステークホルダーと親密な関係を築きPJ内で変更をより簡単に行うことが一般的である。
また、アジャイルソフトウェア開発では開始時点からテストを行う。
レビューは継続的にPJ全体を通して行われ、テストアナリストのタスクはチームが行うことが期待される。
    `,

    testAnalysis: `
### 1.3 テスト分析

テストアナリストは、テスト計画におけるテスト範囲の定義について、以下を実施する。

- テストベースの分析
- テストベースから識別される可能性のある欠陥の種類を特定
- テスト対象のテスト条件とフィーチャーを識別し、優先度を割り当て
- テストベースの各要素と関連するテスト条件の間に双方向のトレーサビリティを確立
- リスクベースドテストに付随するタスクを実行

テストアナリストはテスト分析を効果的に進めるにあたり、以下の開始基準が満たされていることを確認する。

- テスト対象について記述した、テストベースとなりうる知識体系がある
- テストベースは、適切な結果でレビューに合格しており、レビュー後に必要に応じて更新されている
- テスト対象に対して、残りのテストタスクを完了するために適切な予算とスケジュールが確保されている

テスト条件は通常、テストベースをテスト目的と共に分析する。
アジャイルソフトウェア開発では、ユーザストーリーで定義される受入基準がテスト設計のベースとして使用されることが多い。

テストアナリストはテスト条件を考える際に、次の標準的な考慮を行う。
- テスト条件を様々な粒度で定義する。
  例えば、「画面Xの機能性」 > 「画面Xは項目Yの入力桁数をZ桁に制限している」、などのように階層アプローチを使用する。
- プロダクトリスクが定義済みの場合、各リスクへ対処するためのテスト条件を識別する。
    `,

    testDesign: `
### 1.4 テスト設計

テストアナリストは計画時に決定した範囲に従いテストケースを設計し、実装、実行とプロセスが続く。
テストケースの設計は、次の活動を含む。

- ローレベルテストケースまたはハイレベルテストケースがどのテスト領域で最も適切であるかを判断する
- 必要なカバレッジを確保するテスト技法を決定する。使用する可能性がある一連の技法は、テスト計画時に決めてある
- 識別したテスト条件をカバーするテストケースおよびテストケースのセットを設計するために、テスト技法を使用する
- テスト条件とテストケースに準じた必要なテストデータを識別する
- テスト環境を設計し、必要なインフラストラクチャーやツールを識別する
- テストベース、テスト条件、テストケースなどの間で双方向のトレーサビリティを確立する

リスク分析やテスト計画で識別した優先度基準は、分析や設計の段階から実装や実行の段階に至るまで、プロセス全体を通して適用するべきである。

テストを設計するとき、テストアナリストは次の点に留意する。

- 一部のテストアイテムについては、実行手順を指定するテストスクリプトを定義せず、テスト条件のみを定義した方がよい場合がある。この場合、テスト条件はガイドのように使用できるよう定義するべき
- 合格／不合格基準を明確にするべき
- テストケースは他の担当者も理解できるように記述するべき。特に、開発者や監査担当者も理解できるようにする
- テストケースはUIを通じて発生する相互作用のみでなく、他のシステム、ハードウェア、物理イベントなどの相互作用も含めるべき
- テスト対象間のI/Fもテストするように、テストケースを設計するべき
- テスト設計の労力は、リスクレベルやビジネス価値に合致するように優先度を割り当て、バランスを取るべき

#### 1.4.1 ローレベルテストケースとハイレベルテストケース

テストアナリストの職務の一つは、特定の状況で最適なテストケースの設計レベルを決定することである。

ローレベルテストケースには、次の長所がある。

- 経験の少ないテスト担当者でも、プロジェクト内の情報を頼ることで、テストケースを実行できる
- 異なるテスト実行者が再度実行しても、同じ結果となる
- テストベースに存在する自明ではない欠陥を検出できる
- 必要に応じて、テストケースについて監査のような検証が可能となる
- 自動化の実装に費やすコストを削減できる

ローレベルテストケースには次の短所がある。

- 作成及びメンテナンスに多くのコストがかかる
- 実行時のテスト担当者の創造力を制限する傾向にある
- テストベースを明確に定義する必要がある
- テスト条件のトレーサビリティを確保するコストが、ハイレベルテストケースよりも多い傾向がある

ハイレベルテストケースには次の長所がある。

- テストケースのガイドラインを提供し、テストアナリストが実行時に実データや手順を変更できる
- 実行のたびに少しずつ異なるテストを実行するので、ローレベルテストケースよりも優れたリスクカバレッジを提供できる
- 要件プロセスの初期に定義できる
- テストやテスト対象に関するテストアナリストの経験を活用できる
- 詳細かつ形式的なドキュメントが要求されない場合に定義できる
- 異なるテストデータを使用できる場合に、異なるテストサイクルでの再利用性に優れている

ハイレベルテストケースには次の短所がある。

- 再現能力が低く検証を困難にする
- テスト実行のためにより経験のあるテスト担当者が必要となる
- 自動化の際、詳細な情報が不足していることで結果の検証が誤ったり漏れたりする

#### 1.4.2 テストケースの設計

テストケースの設計は識別されたテスト条件に従い、テスト技法によって段階的な推敲・洗練をしていく。
テストケースは再利用可能、検証可能であり、テストベースまでのトレーサビリティが確保されているべきである。

テスト設計では次のアイテムを識別する。

- 目的 (観測可能なテスト実行の目的)
- テスト環境の要件、リリース計画、テスト実行前のシステム状態などの事前条件
- テストデータ要件 (システムへの入力データとシステム内に登録するデータ)
- 明確な合格/不合格基準が定義される期待結果
- 影響を受けたデータ、テスト実行後のシステム状態、後続処理のためのトリガーなどの事後条件

期待結果の定義は手動だとエラーが起きやすく、可能な限り自動化されたテストオラクルの活用が推奨される。
テストアナリストは曖昧なテストベースや複雑な応答にも対応できる知識やリソースが必要であり、テストのレベルや目的に応じた粒度とツール選定も重要である。

テストの成果物として文書化する際に、その範囲に影響を及ぼす要素は次の通りである。

- プロジェクトリスク
- ドキュメントがプロジェクトに提供する「付加価値」
- 準拠する必要のある標準や規制
- SDLCや開発のアプローチ
- テストベースからテスト分析・テスト設計を通してのトレーサビリティ要件

テスト分析および設計は、静的解析やレビューと組み合わせることで強化され、要件の不備や曖昧さを発見する有効な手段となる。
設計時にはテストインフラの要件も検討され、必要な準備が整い測定可能な終了基準が満たされることが重要である。
    `,

    testImplementation: `
### 1.5 テスト実装

テスト実装では、テスト分析と設計の結果に基づき次のテストウェアの準備をする。

- (場合によって自動化された) テストスクリプトを作成する
- テストスイート
- テストケース及びテストスイートの優先度付けを相談
- テストケース実行のためのスケジュール
- テストデータ及びテスト環境
- テストベースとテストウェアとの間のトレーサビリティを更新

テストアナリストはテスト実装時に、効率的な実行順序やテスト手順を決定し、依存関係や制約、初期条件や事後条件を明確にする必要がある。
関連するテスト手順やスクリプトはテストスイートとして整理され、テストの実行効率を高める。

実行順序はリスクレベルを中心に、利用可能な資源やテスト対象の状態なども考慮して決定される。
開発が段階的に進む場合は、テスト可能な順序に応じてテスト計画を調整する必要がある。
テスト設計や条件の粒度は、実装作業の規模や複雑さに影響を与える。
規制準拠が求められるケースでは、証跡としての成果物の準備も必要となる。

テストデータは欠陥検出に適したものを目的に応じて準備し、手動・自動両方のテストで使用される。
テスト環境は「目的にかなった」ものでなければならず、環境変更の際には影響範囲の評価が求められる。
テストアナリストは必要なテストウェアやツールが揃っていることを確認し、テスト結果や進捗の管理方法も検証する。

テスト実装ではリスクベース戦略と探索的テストなどの非スクリプト型手法を適切に組み合わせ、バランスの取れたテストを実施することが推奨される。

スクリプトがないテストは、期間やカバレッジの予測が難しいため無計画に行うべきではなく、テストチャーターに基づいたタイムボックス型セッションとして実施すべきである。
これは探索的テストなどの経験ベースの手法であり、欠陥検出に有効だが、次のような短所もある。

- テストアナリストに専門知識を要求する
- 期間の予測が困難
- カバレッジの追跡が困難
- テストの再現性を維持するために優れたドキュメントやツールのサポートが必要
    `,

    testExecution: `
### 1.6 テスト実行

テスト実行は、スケジュールに従い次のタスクを行う。

- 手動テスト
- 自動テスト
- 実行結果と期待結果の比較
- 不正を分析して、可能性のある原因を特定
- 故障を観察し、観察に基づく欠陥を報告
- テストの結果を記録
- テスト結果の検討のためにトレーサビリティを更新
- リグレッションテスト

次のタスクは、テストアナリストが追加で行う典型的なタスクである。

- 欠陥が集中していて、さらなるテストが必要になりうるテスト対象を特定
- 探索的テストからの発見事項に基づいて、将来の探索的テストに対する提案を作成
- テスト実行タスクを行う際に取得した情報から新しいリスクを識別
- テスト実装活動からのあらゆる成果物を改善するための提案を作成
    `,
  },

  // 2章
  testAnalystTasksInRiskBasedTest: {
    riskIdentification: `
### 2.2 リスク識別

リスク識別プロセスでは、可能な限り幅広いステークホルダーを招集することで、重要なリスクを数多く検出することが可能となる。

テストアナリストは多くの場合対象ドメインの知識を有するため、次のタスクに適している。

- そのドメインの専門家やユーザと共に行う、専門家へのインタビュー
- 独立したアセスメント
- リスクテンプレートの使用
- リスクワークショップへの参加
- 潜在的ユーザや現在のユーザとのブレインストーミングセッションへの参加
- テスト用チェックリストの定義
- 類似システムまたはプロジェクトにおける過去の経験を活用

特にテストアナリストは、ユーザやドメインスペシャリストと連携し、テスト中に対応するべきビジネスリスク領域を決定するべきである。
アジャイルソフトウェア開発では、イテレーションの計画時などの定期的なイベントでリスク識別を実施することで、緊密な連携を行う。

プロジェクトで識別されうるリスクの例を次に示す。

- 機能の正確性の問題 (誤った計算など)
- 使用性の問題 (キーボードショートカットの不足など)
- 移植性の問題 (特定のOSでアプリケーションが使用できないなど)
    `,

    riskAssessment: `
### 2.3 リスクアセスメント

リスクアセスメントは、識別したリスクを調査することを意味する。
特に、それぞれのリスクを分類し、リスクレベルを特定する。

リスクレベルを決定する場合、そのリスクの可能性と影響を評価する。
リスクの影響は、ユーザやそのステークホルダーの影響の重要度と考えることができる。
テストアナリストは、各リスクアイテムがビジネスドメインやユーザに及ぼす潜在的な影響を識別及び評価する必要がある。
ビジネスリスクに影響する要因を次に示す。

- 影響を受けるフィーチャーの使用頻度
- ビジネス損失
- 金銭的損失
- ESG
- 法的制裁
- 安全性
- 賠償金、ライセンスの喪失
- 妥当な回避策の欠如
- フィーチャーの可視性
- 社会的イメージの悪化
- 顧客喪失
    `,

    riskMitigation: `
### 2.4 リスク軽減

プロジェクトの期間において、テストアナリストは次のことに努めるべきである。

- テストの合格/不合格が明確なテストケースを設計し、要件定義や設計のレビューに参加することで、プロダクトリスクを軽減する
- テスト戦略及びテスト計画で識別される適切なリスク軽減活動を実装する (リスクの高いビジネスプロセスに対し、特別なテスト技法を適用する、など)
- プロジェクトの進行度に応じて収集した情報から、既知のリスクを再評価したり、新しいリスクを識別する

#### 2.4.1 テストの優先度付け

リスクレベルはテストケースの優先度付けにも使用する。
必要なテストを必要なタイミングで実施できるよう、計画段階で可能な限り早く個の優先度付けを考慮するべきである。
場合によって、全ての高リスクのテストケースを低リスクのそれよりも優先して実行することも考える。
これは 縦型探索 (depth-first) と呼ばれる。
また別の場合では、識別したリスク領域のすべてをカバーするテストケースのサンプルを選択する。
これは 横型探索 (breadth-first) と呼ばれる。

リスクベースドテストは、縦型探索と横型探索のどちらで進めたとしても、全てのテストを実行する工数が不足する可能性がある。
テストアナリストはマネジメントに残リスクを報告し、マネジメントはテストを延長するか、ユーザや顧客、運用スタッフにリスクを移転するかを決定する。

#### 2.4.2 将来のテストサイクルに向けたテストの調整

リスクアセスメントはテスト実装前に1度だけ実行する活動ではなく、継続するプロセスである。
将来に計画する各テストサイクルでは、以下に示す要素を考慮するため、新しくリスク分析を行うべきである。

- 新しい、または大幅に変更されたプロダクトリスク
- テスト時に発見された不安定または故障の多い領域
- 修正された欠陥からのリスク
- テスト時に発見された典型的な欠陥
- テストが不十分な (要件カバレッジの低い) 領域
    `,
  },

  // 3章
  testTechniques: {
    blackBoxTestTechniques: `
### 3.2 ブラックボックステスト技法

#### 同値分割法

同値分割法は、入力データを有効同値クラスと無効同値クラスに分類し、それぞれのクラスから代表値を選んでテストを行う設計技法である。
同じクラスに属する値はシステムが同様に処理すると期待されるため、テストケース数を削減しながら十分な網羅性を確保できる。
主に入力条件が広い範囲を持つ場合や、条件が明確に定義されている場合に有効である。
ブラックボックステストに分類され、仕様ベースのテスト設計に用いられる。

#### 境界値分析

境界値分析は、入力や出力の境界付近で不具合が発生しやすいという経験則に基づくテスト設計技法である。
有効・無効の境界に位置する値（ちょうど境界の値、その直前と直後の値）を選んでテストを行う。
数値範囲やサイズなど、連続的な値を扱う仕様に対して特に効果的である。
ブラックボックステストの一種であり、同値分割法と組み合わせて使用されることが多い。

#### デシジョンテーブルテスト

デシジョンテーブルテストは、入力条件とそれに対応する動作の組み合わせを表形式で整理し、網羅的なテストケースを導出する手法である。
複数の条件が存在し、それらの組み合わせによって処理結果が異なる仕様に対して有効である。
条件と結果の対応関係を明確にすることで、抜けや矛盾のないテスト設計が可能となる。
ブラックボックステストの一種であり、ビジネスルールや論理的判断を含むシステムに適している。

#### 状態遷移テスト

状態遷移テストは、システムがある状態から別の状態へ遷移する過程を検証する設計技法である。
状態、遷移、イベント（入力）、アクション（出力）を明確に定義し、状態遷移図や表に基づいてテストケースを作成する。
過去の入力や状態によって振る舞いが変化するシステム、たとえばワークフローや認証処理などに効果的である。
ブラックボックステストに分類され、正常な遷移だけでなく不正な遷移の検出にも用いられる。

#### クラシフィケーションツリー技法

クラシフィケーションツリー技法は、テスト条件（分類）とその値（分類子）を階層的なツリー構造で整理し、網羅的かつ効率的にテストケースを設計する手法である。
複数の入力条件を視覚的に整理できるため、条件の組み合わせや抜け漏れの確認が容易である。
条件間の依存関係や有効な組み合わせのルールも管理しやすく、ツールを用いて自動生成されることもある。
ブラックボックステストに分類され、GUIテストや組み合わせテストに適している。

#### ペアワイズテスト

ペアワイズテストは、複数の入力パラメータのすべての組み合わせを網羅する代わりに、任意の2つのパラメータの全ての組み合わせ（2因子間）をカバーするテスト設計手法である。
全組み合わせテストと比べてテストケース数を大幅に削減しながら、一般的な欠陥の多くを検出できる。
入力条件が多いシステムに対して効果的であり、合理的な網羅性とコストのバランスが取れる。
ブラックボックステストの一種であり、組み合わせ爆発の問題に対処するためによく用いられる。

#### ユースケーステスト

ユースケーステストは、システムの利用シナリオ（ユースケース）をもとに、ユーザの操作とシステムの応答をテストする設計技法である。
ユーザの視点でシステムの振る舞いを確認することができ、要求仕様との整合性の確認にも有効である。
主に業務フローやユーザとの対話を含む場面で活用され、正常系・異常系のシナリオをカバーする。
ブラックボックステストに分類され、特に上位レベルのテスト（システムテストなど）で活用されることが多い。
    `,

    experienceBasedTestTechniques: `
### 3.3 経験ベースのテスト技法

#### エラー推測

エラー推測は、過去の経験や類似システムにおける欠陥事例をもとに、バグが発生しやすい箇所を推定してテストを行う技法である。
具体的な根拠に基づくのではなく、テスト担当者の知識や直感に依存する部分が大きい。
境界値、ゼロ、空白、NULLなど、よくあるミスの典型パターンに着目することが多い。
体系的な手法ではないが、他の技法では見落としやすい欠陥を見つけるのに効果的である。

#### チェックリストベースドテスト

チェックリストベースドテストは、事前に定義されたチェックリスト項目に従ってテストを実施する技法である。
チェックリストには、一般的な品質属性、過去の障害事例、規格や手順などが含まれることが多い。
網羅性や抜け漏れを防止する手段として有効であり、経験が浅いテスト担当者の補助にもなる。
形式的な仕様が不十分な場面や回帰テストにおいて効果的に使用される。

#### 探索的テスト

探索的テストは、テスト設計、実行、学習を同時に行いながら、自由度の高い探索的アプローチでシステムを評価する技法である。
事前に詳細なテストケースを用意せず、テスターの直感やシステム理解に基づいてテストを進める。
セッションごとに目的やチャーターを設定し、時間を区切って集中的に行うことが多い。
予期せぬ欠陥の発見に効果的であり、特に要件が曖昧な段階やアジャイル開発で重視される。

#### 欠陥ベースのテスト技法

欠陥ベースのテスト技法は、過去に発見された欠陥の傾向や分類に基づいて、新たなテストケースを導出する手法である。
組織内の障害データやバグトラッキング情報を活用し、同様の欠陥が再発しないよう重点的にテストする。
特定のモジュールや機能に問題が集中している場合などに有効である。
事実に基づいたリスク指向のアプローチであり、テストの優先順位付けにも役立つ。
    `,

    applicationOfBestTechniques: `
### 3.4 最善の技法の適用

ブラックボックステスト技法及び経験ベースのテスト技法は、一緒に使用すると最も効果的である。
全ての状況に対して完璧である技法は存在しない。
テストアナリストは、各技法の長所と短所を理解し、プロジェクトの種類、スケジュール、情報へのアクセス、テスト担当者のスキル、及び選択に影響する可能性のある要因を考慮して、
特定の状況にとって最善の技法または複数の技法を選択することが重要である。
    `,
  },

  // 4章
  softwareQualityFeatureTest: {
    businessDomainTestQualityFeature: `
### 4.2 ビジネスドメインテストの品質特性

#### 機能適切性

- ソフトウェアが指定されたタスクやユーザニーズに対して適切な機能を提供しているかを確認する。
- ユースケーステストや業務シナリオに基づくテストが有効。
- 要件定義段階からのレビューや、ユーザーストーリーに対するテスト条件の抽出により適切性を確認。

#### 機能正確性

- ソフトウェアが正確な結果や効果を提供するかどうかを評価。
- 同値分割法や境界値分析を活用して、仕様に対する正確な振る舞いを網羅的に検証。
- デシジョンテーブルテストによって複雑なビジネスルールの正確性を確認することもある。

#### 使用性（ユーザビリティ）

- ユーザーインターフェースのわかりやすさ、学習のしやすさ、魅力性を評価する。
- エラーメッセージの明確さ、ナビゲーションの一貫性などをチェックリストベースドテストで検証。
- 探索的テストやユーザビリティテスト（ユーザテスト）の実施が推奨される。

#### 性能効率（パフォーマンス）

- 応答時間、処理速度、リソース使用率などを検証。
- 性能テストツールを使って負荷、ストレス、スパイクテストを実施。
- ユーザーシナリオに基づき、システムが実運用に耐えうるかを確認する。

#### 信頼性

- ソフトウェアが一定期間、指定された条件で機能し続ける能力を評価。
- 耐障害性や回復性を重点的にテスト。
- 長時間運用テストや、意図的に障害を発生させてのリカバリテストが有効。

#### セキュリティ

- 認証、認可、機密保持、データ整合性などの側面を評価。
- ペネトレーションテストやセキュリティレビューが中心。
- 脅威モデリング結果に基づいたチェックリストベースのテストや欠陥ベースのテストも適用される。

#### 保守性

- ソフトウェアの変更のしやすさ、モジュール性、再利用性を評価。
- 間接的に、回帰テストの容易さやテスト自動化による検証が重要なポイントとなる。
- シラバスでは直接的な保守性テストの詳細は少ないが、変更管理やバージョン管理と連携して確認する。

#### 移植性

- 異なるプラットフォームや環境への移行のしやすさを評価。
- テストでは異なるOS、ブラウザ、デバイスなどでの動作検証が行われる。
- コンフィグレーション管理と連携し、多環境での実行性を確認する。
    `,
  },

  // 5章
  review: {
    checkListUseOnReview: `
### 5.2 レビューでのチェックリストの使用

チェックリストベースレビューは、テストアナリストがテストケースをレビューする際に最もよく使用する技法である。
チェックリストを使用することで、検証する具体的なポイントを認識することができ、属人的なレビューを避けるのにも役に立つ。
チェックリストは汎用的にすることも、特定の品質特性やドキュメントの種類に焦点を絞ることもできる。

チェックリストは次のような特定の側面を対象にすることもある。

- プログラマ、アーキテクト、テスト担当者のスキルセット
- 特定のリスクレベル (セーフティクリティカルシステムの場合など)
- 特定のテスト技法
- 特定の仕様アイテム (要件、ユースケース、ユーザーストーリーなど)

#### 5.2.1 要件レビュー

要件指向のチェックリストが含むアイテムの例を以下に示す。

- 要件の出どころ
- 各要件の試験性
- 各要件の優先順位
- 各要件の受け入れ基準
- ユースケースの呼び出し構造の可用性
- 各要件/ユースケース/ユーザーストーリーの一意な識別子
- 各要件/ユースケース/ユーザーストーリーのバージョン設定
- ビジネス/マーケティング要件から各要件へのトレーサビリティ
- 要件そして/またはユースケース間のトレーサビリティ
- 一貫性のある用語の使用

ユースケースレビューの単純なチェックリストは、次の質問を含む場合がある。

- メインのふるまい (パス) は明確に定義されているか？
- 全ての代替のふるまい (パス) は識別されており、エラー処理は完全に備わっているか？
- UIメッセージは定義されているか？
- メインのふるまいは1つだけか？
- それぞれのふるまいはテスト可能か？

#### 5.2.2 ユーザーストーリーレビュー

アジャイルソフトウェア開発では、一般的に要件をユーザーストーリーの形式で表す。
これらのストーリーは、実証可能な機能の小さな単位を表す。
ユースケースは機能の複数の領域を横断するユーザートランザクションであるが、ユーザーストーリーはより独立したフィーチャーであり、一般的には開発にかかる時間によりその範囲が決まる。
ユーザーストーリー向けのチェックリストは次に示す質問を含むことができる。

- ストーリーは対象のイテレーション/スプリントにとって適切か？
- ストーリーは要求者の観点で記述されているか？
- 受け入れ基準は定義されており、テスト可能か？
- フィーチャーは明確に定義されており、他と区別できるか？
- ストーリーは他のストーリーから独立しているか？
- ストーリーに優先度が割り当てられているか？
- ストーリーは一般的に使用される形式に従っているか？

#### 5.2.3 チェックリストの調整

チェックリストは次の項目に基づいて調整ができる。

- 組織 (企業ポリシー、標準、習慣、法的制約など)
- プロジェクト/開発の取り組み (重点項目、技術的標準、リスクなど)
- レビュー対象の成果物の種類
- レビュー対象の作業成果物のリスクレベル
- 使用するテスト技法
    `,
  },

  // 6章
  testToolAndAutomation: {
    keywordDrivenTest: `
### 6.2 キーワード駆動テスト

キーワード駆動テストは、主要なテスト自動化手法の一つで、テストアナリストは主となる入力であるキーワードとデータを提供する。
キーワードは多くの場合、ビジネスとシステムのハイレベルな相互作用を表すために使用される。
キーワードの配列は、テストケースを特定するために使用する。

テスト自動化では、キーワードを1つ以上の実行可能テストスクリプトとして実装する。
ツールはキーワードの配列を読み込み、各スクリプトはキーワードに紐づくようにモジュール化する。
これらのモジュール化したスクリプトを実装するには、プログラミングスキルが必要となる。
また、キーワードやアクションワードデータの作成やメンテナンスはテストアナリストのタスクであり、その定義に基づきテスト自動化担当者が自動化テストスクリプトを開発する。
一般的にキーワード駆動テストはシステムテストで実行するが、スクリプトのコード開発はテスト設計のできる限り早い段階で始まることがある。
イテレーティブ環境では、CI/CDプロセスに伴い継続的にテスト自動化を開発する。

キーワード駆動テストのメリットを次に示す。

- ドメインエキスパートがキーワードを定義できる。これによりテストケース仕様作成のタスクがより効率的になる。
- 主要なドメイン知識を保有するエキスパートがスクリプトのコードを理解する必要はない。
- モジュラー型記述技法を使用すると、テスト対象の機能やI/Fに変更が発生した場合も、効率的にテストケースをメンテナンスできる。
- テストケース仕様はその実装から独立している。
    `,

    testToolType: `
### 6.3 テストツールの種類

多くのテストアナリストが担当する作業では、ツールを有効に使用する必要がある。
この際、以下によってツールの有効性を高めることができる。

- 使用すべきツールを知っている
- ツールがテスト作業の効率を高められることを知っている

#### 6.3.1 テスト設計ツール

テスト設計ツールは、テストに使用するテストケースやデータの作成を支援する。
特定の要件ドキュメント形式、モデル、またはテストアナリストが提供する入力に基づいて動作する。
多くの場合、特定の形式や特定のツールと連携して動作するように設計・構築する。

テスト設計ツールは、ターゲットとなるカバレッジ、システムへの確証、またはプロダクトリスク軽減アクションを達成する為のテストケースの種類を決定する情報をテストアナリストへ提供する。
例えば、クラシフィケーションツリーツールは、ターゲットのカバレッジを達成するために必要な組み合わせセットを生成する。
テストアナリストはこれを基に実行するテストケースを決定できる。

#### 6.3.2 テストデータ準備ツール

テストデータ準備ツールには次の利点がある。

- 要件ドキュメントやソースコードを分析し、カバレッジのレベルを達成するためのテストデータを決定する。
- データセットを本番システムから取得し、データの内部的な整合性を維持しながら選択または秘匿化を行い、個人情報を削除できる。
- 特定の入力パラメータセットから合成テストデータを作成できる。

#### 6.3.3 テスト自動実行ツール

テスト実行ツールを使用する目的は、次の1つ以上の項目に該当する。

- コスト削減
- より多くのテストケースを実行
- 同じテストケースを多くの環境で実行
- テスト実行の再現性向上
- 手動実行できないテストケースを実行
    `,
  },
};

export default [
  {
    sentence: `
テストアナリストはSDLCにおいて、プロジェクトに関わる各役割の担当者に向けて、テストに関する情報を提供する役割を担う。
以下の提供先と提供する情報の組み合わせのうち、テストアナリストの業務として適切でないものを2つ選択せよ。
    `,
    options: [
      "ビジネス要求の担当者に対して、要件レビューのフィードバックを提供する",
      "プロジェクトマネージャーに対して、テストケースとその実施手順を提供する",
      "構成管理及び変更管理の担当者に対して、ビルド検証テストの結果を提供する",
      "ソフトウェア開発の担当者に対して、検出されたバグの詳細情報を提供する",
      "テクニカルサポートの担当者に対して、テストウェアの詳細情報を提供する",
    ],
    answer: [1, 4],
    explanation: explanation.testProcessTasks.testInSDLC,
    aiGenerated: false,
    type: "multiple",
  },
  {
    sentence: `
テストアナリストは選択したSDLCに対し、整合するテスト活動を計画する必要がある。
シーケンシャルなV字モデルにおいて、各テストプロセスをシステムテストレベルに適用する場合、以下の記述から正しく整合していないものを2つ選択せよ。
    `,
    options: [
      "プロジェクト計画と同時にテスト計画をはじめ、テスト完了までモニタリングとコントロールを継続する",
      "テスト分析及びテスト設計は、システム要件仕様、システムアーキテクチャ、コンポーネント仕様書などのドキュメントに沿って行う",
      "テスト環境の実装は、システム設計時に開始するが、大部分の作業はコーディングやコンポーネントテストと同時に開始することが多い",
      "テスト実行は、テストの開始条件を満たしたときに始まる。これは最低でも開発フェーズが完了していて、実行可能なモジュールが完成していることを意味する",
      "テスト完了活動は、一通りのテストケースを実行し、不具合がまだ残存する段階で初めてよい",
    ],
    answer: [3, 4],
    explanation: explanation.testProcessTasks.testInSDLC,
    aiGenerated: false,
    type: "multiple",
  },
  {
    sentence:
      "シーケンシャルでないSDLCを選択した場合のテストプロセスについて、誤った記述を1つ選択せよ。",
    options: [
      "イテレーティブモデルやインクリメンタルモデルでは、活動を異なる順で実行することもある",
      "イテレーティブモデルやインクリメンタルモデルでは、一部の活動をスキップすることもある",
      "アジャイルソフトウェア開発では、開発のイテレーションとテストのイテレーションを分けることが多い",
      "アジャイルソフトウェア開発では、継続的にレビューが行われ、テストアナリストのタスクはチームメンバーが行うことが多い",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks.testInSDLC,
    aiGenerated: false,
    type: "single",
  },
  {
    sentence:
      "テストアナリストがテストプロジェクトの範囲を定義する活動において行うタスクとして、正しいものを2つ選択せよ。",
    options: [
      "テストベースを作成する",
      "テストベースの欠陥を修正する",
      "テスト対象のフィーチャーを識別し、優先度付けを行う",
      "テストベースとテスト条件の間のトレーサビリティを確立する",
      "リスクアセスメントを行う",
    ],
    answer: [2, 3],
    explanation: explanation.testProcessTasks.testAnalysis,
    aiGenerated: false,
    type: "multiple",
  },
  {
    sentence:
      "テストアナリストがテスト分析を効率的に進めるにあたり、確認する開始基準として誤っているものを2つ選択せよ。",
    options: [
      "テストハーネスが完成しており、テスト実行の準備が整っている",
      "テスト対象について記述した、テストベースとなりうる知識体系がある",
      "テストベースは、適切な結果でレビューに合格しており、レビュー後に必要に応じて更新されている",
      "テスト対象に対して、残りのテストタスクを完了するために適切な予算とスケジュールが確保されている",
      "テストベースがなくても、テスト計画に基づいたテスト分析は可能である",
    ],
    answer: [1, 5],
    explanation: explanation.testProcessTasks.testAnalysis,
    aiGenerated: false,
    type: "multiple",
  },
  {
    sentence: "同値分割法に関する以下の記述のうち、正しいものを2つ選択せよ。",
    options: [
      "同値分割法はテストケース数を削減しつつ網羅性を高める技法である",
      "同値分割法は主に構造ベーステストに分類される",
      "有効同値クラスと無効同値クラスのそれぞれから少なくとも1つの代表値を選択する",
      "同値分割法はテスト対象の遷移状態を詳細にモデル化することに重点を置いている",
      "同値分割法はアジャイル開発では使用されない",
    ],
    answer: [0, 2],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "状態遷移テスト技法に関する記述として、正しいものを2つ選択せよ。",
    options: [
      "状態遷移テストは、イベントとアクションの関係をモデル化することに重点を置く",
      "状態遷移テストは主に単体テストレベルで使用される",
      "状態遷移テストは過去の状態に依存しない振る舞いのテストに適している",
      "状態遷移テストでは、不正な遷移のテストケースも含まれることがある",
      "状態遷移テストは主に静的テストに分類される",
    ],
    answer: [0, 3],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "探索的テストの特性として適切なものを2つ選択せよ。",
    options: [
      "探索的テストは事前に全ての手順を文書化することが前提である",
      "探索的テストはテスト設計、実行、学習を同時に進める",
      "探索的テストは欠陥を見つけるための柔軟なアプローチである",
      "探索的テストは全てのテストが自動化されていることが前提である",
      "探索的テストは必ずしも明確な受け入れ基準を必要としない",
    ],
    answer: [1, 2],
    explanation: explanation.testTechniques.experienceBasedTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "リスクアセスメントにおけるリスクレベルの決定に関して、正しいものを2つ選択せよ。",
    options: [
      "リスクレベルは影響の大きさと発生可能性によって決まる",
      "リスクアセスメントではプロジェクトリスクのみを対象とする",
      "フィーチャーの使用頻度はリスクの影響に含まれる要素である",
      "リスクアセスメントはプロジェクトの終了時に1回のみ実施する",
      "リスクアセスメントでは金銭的損失は評価項目にならない",
    ],
    answer: [0, 2],
    explanation: explanation.testAnalystTasksInRiskBasedTest.riskAssessment,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "クラシフィケーションツリー技法の特徴として正しいものを2つ選択せよ。",
    options: [
      "分類と分類子を階層的に整理する",
      "主に構造ベースのテスト設計に用いられる",
      "GUIテストなどでの視覚的整理に有効である",
      "ペアワイズテストの代替として用いられることが多い",
      "分類子の組み合わせを表形式で整理する技法である",
    ],
    answer: [0, 2],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "ハイレベルテストケースの長所として正しいものを2つ選択せよ。",
    options: [
      "再現性が高いため自動化に適している",
      "テストアナリストの創造力を活かせる",
      "詳細なドキュメントが必須である",
      "異なるテストデータの活用による再利用性がある",
      "初心者のテスト担当者向けである",
    ],
    answer: [1, 3],
    explanation: explanation.testProcessTasks.testDesign,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "テストデータ準備ツールの利点として正しいものを2つ選択せよ。",
    options: [
      "実データを使ってパフォーマンステストを行う",
      "本番データから個人情報を削除して利用できる",
      "仕様書に基づきソースコードを自動生成する",
      "必要なパラメータセットから合成データを作成できる",
      "モックサーバーの構築を支援する",
    ],
    answer: [1, 3],
    explanation: explanation.testToolAndAutomation.testToolType,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "デシジョンテーブルテストが有効な状況として適切なものを2つ選択せよ。",
    options: [
      "入力が単一の閾値で処理される場面",
      "複雑なビジネスルールが複数条件で分岐する場面",
      "状態遷移を中心にしたワークフローのテスト",
      "条件と結果の網羅性が求められる場面",
      "UIの視認性を中心にした評価",
    ],
    answer: [1, 3],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "品質特性「使用性」に関連するテスト技法として適切なものを2つ選択せよ。",
    options: [
      "チェックリストベースドテスト",
      "ユースケーステスト",
      "性能テスト",
      "エラー推測",
      "構造ベーステスト",
    ],
    answer: [0, 1],
    explanation:
      explanation.softwareQualityFeatureTest.businessDomainTestQualityFeature,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "リスクベースドテストにおける縦型探索と横型探索に関する記述のうち、正しいものを2つ選択せよ。",
    options: [
      "縦型探索では、すべてのリスク領域の浅いテストを実施する",
      "横型探索では、特定のリスクアイテムに重点を置く",
      "縦型探索では、高リスク領域を優先して深く掘る",
      "横型探索は、各リスク領域に最低1つのテストケースを割り当てる戦略である",
      "縦型・横型の両方は、リスクが高くない部分のテストを最初に行う",
    ],
    answer: [2, 3],
    explanation: explanation.testAnalystTasksInRiskBasedTest.riskMitigation,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "リスク識別に関するテストアナリストの活動として正しいものを2つ選択せよ。",
    options: [
      "リスクの発生確率に基づいてリスクレベルを定量評価する",
      "ユーザとのブレインストーミングセッションに参加する",
      "リスク軽減策の優先順位を決定する",
      "類似プロジェクトの障害傾向を参照する",
      "すべてのリスク領域に均等なテスト量を割り当てる",
    ],
    answer: [1, 3],
    explanation: explanation.testAnalystTasksInRiskBasedTest.riskIdentification,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "ブラックボックステスト技法として分類されるものを2つ選択せよ。",
    options: [
      "制御フローテスト",
      "同値分割法",
      "デシジョンカバレッジ",
      "ユースケーステスト",
      "条件判断カバレッジ",
    ],
    answer: [1, 3],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "キーワード駆動テストの特徴として正しいものを2つ選択せよ。",
    options: [
      "テストスクリプトとキーワードは密結合である必要がある",
      "テスト設計とテスト実装が密接に統合される",
      "テストケース記述と自動化スクリプトを分離できる",
      "ドメインエキスパートがテスト仕様を定義しやすい",
      "主に探索的テストで活用される",
    ],
    answer: [2, 3],
    explanation: explanation.testToolAndAutomation.keywordDrivenTest,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "テスト設計時に考慮すべき事項として正しいものを2つ選択せよ。",
    options: [
      "テスト手順は必ず詳細に記述する必要がある",
      "テストの自動化はこの段階で完了している必要がある",
      "合否基準は明確に定義されていなければならない",
      "テストケースは他の担当者にも理解可能な内容であるべき",
      "システム構成はテスト設計の対象外である",
    ],
    answer: [2, 3],
    explanation: explanation.testProcessTasks.testDesign,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "リスク軽減のアプローチとして正しいものを2つ選択せよ。",
    options: [
      "すべてのテストケースに均等な重みを与える",
      "テスト計画時に特定のリスク領域を明示する",
      "失敗の可能性が高い機能を後回しにする",
      "ビジネスリスクに基づいて優先順位を設定する",
      "低リスクの部分からテストを始める",
    ],
    answer: [1, 3],
    explanation: explanation.testAnalystTasksInRiskBasedTest.riskMitigation,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "テスト実装時に必要な作業として適切なものを2つ選択せよ。",
    options: [
      "全てのテストを手動で実行する手順を作成する",
      "テストスイートを構成し、実行順序を検討する",
      "テストケースの実行結果に基づいて要件を修正する",
      "テスト環境やテストデータを準備する",
      "すべてのテストにリグレッションラベルを付ける",
    ],
    answer: [1, 3],
    explanation: explanation.testProcessTasks.testImplementation,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "ユースケーステストの特徴として正しいものを2つ選択せよ。",
    options: [
      "複雑なアルゴリズムの処理フローを検証する",
      "ユーザとシステムの対話を重視してテストする",
      "コンポーネント単位での構造カバレッジを評価する",
      "正常系および異常系の業務フローに基づくテストを行う",
      "入力パターンをランダムに組み合わせる",
    ],
    answer: [1, 3],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "レビューにおけるチェックリストの利点として適切なものを2つ選択せよ。",
    options: [
      "レビュアーの主観に頼らず、統一された観点で確認できる",
      "レビュープロセスが完全に自動化される",
      "特定の品質特性に応じたカスタマイズが可能である",
      "ドキュメントを自動生成するためのテンプレートになる",
      "仕様と実装を同期させる",
    ],
    answer: [0, 2],
    explanation: explanation.review.checkListUseOnReview,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence:
      "テスト実行フェーズでテストアナリストが追加で行うべき典型的なタスクとして適切なものを2つ選択せよ。",
    options: [
      "テストの合否基準を再定義する",
      "探索的テストで得られた知見を基に提案を作成する",
      "障害データを削除してリリースする",
      "新たに判明したリスクを特定する",
      "すべてのテストケースを優先度順に並べ替える",
    ],
    answer: [1, 3],
    explanation: explanation.testProcessTasks.testExecution,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: "欠陥ベースのテスト技法の特徴として正しいものを2つ選択せよ。",
    options: [
      "主に構造ベーステストで使用される",
      "過去に発見された欠陥の傾向を分析して活用する",
      "常にランダムなデータに基づいてテストを設計する",
      "リスクに基づく優先順位付けに有効である",
      "テスト対象が存在しない段階で適用される",
    ],
    answer: [1, 3],
    explanation: explanation.testTechniques.experienceBasedTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
テストアナリストがテストケース設計時に意識すべきこととして、適切なものを2つ選択せよ。
    `,
    options: [
      "テスト条件は具体的な手順とともに常に詳細に記述すべきである",
      "テストケースの目的と期待結果は明確であるべきである",
      "すべてのテストはUIを通じた操作のみを対象とすべきである",
      "テスト対象間のI/Fもテスト設計に含めるべきである",
      "探索的テストを禁止するべきである",
    ],
    answer: [1, 3],
    explanation: explanation.testProcessTasks.testDesign,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
テスト実装におけるテストスイートの整理に関して正しいものを1つ選択せよ。
    `,
    options: [
      "テストスイートはすべてのテストケースを一つのグループにまとめる",
      "テストスイートは同一優先度のテストケースをグループ化する手段の一つである",
      "テストスイートはテストの実行結果には影響を及ぼさない",
      "テストスイートはテスト設計段階でのみ使用される",
    ],
    answer: 1,
    explanation: explanation.testProcessTasks.testImplementation,
    aiGenerated: true,
    type: "single",
  },
  {
    sentence: `
レビューにおけるユースケースのチェックリスト項目として、適切なものを2つ選択せよ。
    `,
    options: [
      "UIのカラーリングが正しく設定されているか",
      "メインパスと代替パスが明確に定義されているか",
      "受け入れ基準がストーリーごとに定義されているか",
      "ユーザーインターフェースのレスポンスタイムが速いか",
      "各パスがテスト可能であるか",
    ],
    answer: [1, 4],
    explanation: explanation.review.checkListUseOnReview,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
テストデザインツールに関する記述として正しいものを2つ選択せよ。
    `,
    options: [
      "テストデザインツールはソースコードの静的解析専用である",
      "クラシフィケーションツリーツールは条件の組み合わせ生成を支援する",
      "テストデザインツールは必ずしもカバレッジ情報を提供しない",
      "テストアナリストはツールが提供する組み合わせ候補からテストケースを選定する",
      "テストデザインツールはテスト結果を集計するために使う",
    ],
    answer: [1, 3],
    explanation: explanation.testToolAndAutomation.testToolType,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
以下のうち、「機能正確性」に特に関連するテスト技法として適切なものを2つ選択せよ。
    `,
    options: [
      "探索的テスト",
      "境界値分析",
      "ペアワイズテスト",
      "デシジョンテーブルテスト",
      "クラシフィケーションツリーテスト",
    ],
    answer: [1, 3],
    explanation:
      explanation.softwareQualityFeatureTest.businessDomainTestQualityFeature,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
チェックリストベースドテストの有効な使用シーンとして最も適切なものを1つ選択せよ。
    `,
    options: [
      "構造カバレッジを評価する際",
      "要件が存在しないフェーズでの確認",
      "過去に障害が多発した領域での網羅性確保",
      "状態遷移を詳細にトレースする場合",
    ],
    answer: 2,
    explanation: explanation.testTechniques.experienceBasedTestTechniques,
    aiGenerated: true,
    type: "single",
  },
  {
    sentence: `
以下のうち、テスト実行フェーズにおける標準的なタスクとして正しいものを2つ選択せよ。
    `,
    options: [
      "実行結果と期待結果を比較する",
      "システム設計を変更する",
      "取得した障害を削除する",
      "テスト結果を記録する",
      "ユーザーに納品物を提示する",
    ],
    answer: [0, 3],
    explanation: explanation.testProcessTasks.testExecution,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
探索的テストの欠点として最も適切なものを1つ選択せよ。
    `,
    options: [
      "テスト設計と実行を明確に分離して行える",
      "テストチャーターを用いた目的設定ができない",
      "予測しづらい期間とカバレッジの曖昧さがある",
      "熟練者でなくても容易に実施可能である",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks.testImplementation,
    aiGenerated: true,
    type: "single",
  },
  {
    sentence: `
以下のうち、ユースケーステストに関して誤っているものを1つ選択せよ。
    `,
    options: [
      "ユーザーの操作とシステムの応答を確認する",
      "異常系の業務シナリオを網羅的に設計できる",
      "仕様が不明確な場合でも無条件に適用可能である",
      "ユーザー視点での検証に有効である",
    ],
    answer: 2,
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "single",
  },
  {
    sentence: `
ブラックボックステスト技法の目的として適切なものを2つ選択せよ。
    `,
    options: [
      "ソースコードの各分岐が実行されるかを検証する",
      "ユーザー要求に基づく振る舞いを確認する",
      "ユースケースの仕様に対する整合性を確認する",
      "コードの静的解析を支援する",
      "制御フローの網羅率を高める",
    ],
    answer: [1, 2],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
以下のうち、ハイレベルテストケースの短所として正しいものを2つ選択せよ。
    `,
    options: [
      "再現性が低く、検証が困難である",
      "初期段階では記述できない",
      "詳細なドキュメントを必要とする",
      "実行には経験豊富なテスターが必要である",
      "自動化には向いている",
    ],
    answer: [0, 3],
    explanation: explanation.testProcessTasks.testDesign,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
リスク識別活動におけるテストアナリストの役割として、最も適切なものを1つ選択せよ。
    `,
    options: [
      "障害発生後の根本原因を分析する",
      "リスク回避のためのソースコードを記述する",
      "対象ドメインの知識を活かし、リスクワークショップ等に参加する",
      "法的制約を排除するよう仕様を修正する",
    ],
    answer: 2,
    explanation: explanation.testAnalystTasksInRiskBasedTest.riskIdentification,
    aiGenerated: true,
    type: "single",
  },
  {
    sentence: `
ブラックボックステストの中でも、入力条件の組み合わせに重点を置いた技法として正しいものを2つ選択せよ。
    `,
    options: [
      "ユースケーステスト",
      "状態遷移テスト",
      "ペアワイズテスト",
      "同値分割法",
      "デシジョンテーブルテスト",
    ],
    answer: [2, 4],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
以下のうち、「セキュリティ」品質特性に関連するテストとして適切なものを2つ選択せよ。
    `,
    options: [
      "負荷テスト",
      "ペネトレーションテスト",
      "チェックリストベースのレビュー",
      "状態遷移テスト",
      "探索的テストによるUI評価",
    ],
    answer: [1, 2],
    explanation:
      explanation.softwareQualityFeatureTest.businessDomainTestQualityFeature,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
テスト設計の成果物に関して、正しい記述を2つ選択せよ。
    `,
    options: [
      "テストケースには常に自動化が必要である",
      "期待結果は可能な限り自動オラクルを活用して定義する",
      "テストの目的は非観測的なものでもよい",
      "事後条件にはテスト後のシステム状態や後続処理のトリガーなどが含まれる",
      "テスト条件にはシステムの構成情報を含めるべきである",
    ],
    answer: [1, 3],
    explanation: explanation.testProcessTasks.testDesign,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
チェックリストの調整において考慮すべき観点として正しいものを2つ選択せよ。
    `,
    options: [
      "組織の標準や法的要件",
      "テスト実装の自動化レベル",
      "使用される開発言語の種類",
      "レビュー対象のリスクレベル",
      "リリースの回数",
    ],
    answer: [0, 3],
    explanation: explanation.review.checkListUseOnReview,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
次のうち、テストアナリストがテスト分析時に確認する「開始基準」として適切なものを2つ選択せよ。
    `,
    options: [
      "テスト計画が完了していること",
      "テスト対象に対して予算とスケジュールが確保されていること",
      "全てのテストツールが購入されていること",
      "レビュー済みのテストベースが存在すること",
      "開発スケジュールが1週間以内に終了すること",
    ],
    answer: [1, 3],
    explanation: explanation.testProcessTasks.testAnalysis,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
テスト実装フェーズにおいて、優先度付けが影響するものとして最も適切なものを1つ選択せよ。
    `,
    options: [
      "レビューの対象範囲",
      "障害票のテンプレート形式",
      "テストケースの実行順序",
      "システムアーキテクチャの選定",
    ],
    answer: 2,
    explanation: explanation.testProcessTasks.testImplementation,
    aiGenerated: true,
    type: "single",
  },
  {
    sentence: `
以下のうち、状態遷移テストが特に有効な状況として適切なものを2つ選択せよ。
    `,
    options: [
      "データベースのレコード件数を検証する場合",
      "ワークフローの工程が複数ある業務システム",
      "ログ出力の有無だけを確認する場合",
      "イベントと状態の組み合わせによって挙動が変化する機能",
      "数値入力の範囲チェックを行うフォーム",
    ],
    answer: [1, 3],
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
ペアワイズテストが特に効果を発揮する状況として適切なものを1つ選択せよ。
    `,
    options: [
      "状態によって動作が変わるアプリケーション",
      "入力パラメータが多く、全組み合わせのテストが非現実的な場合",
      "テストケースの合否基準が不明瞭な場合",
      "パフォーマンス要件を検証する場合",
    ],
    answer: 1,
    explanation: explanation.testTechniques.blackBoxTestTechniques,
    aiGenerated: true,
    type: "single",
  },
  {
    sentence: `
レビューに使用するチェックリストの焦点として適切なものを2つ選択せよ。
    `,
    options: [
      "レビュアーの感想",
      "ドキュメントの提出期限",
      "対象仕様アイテム（例：ユースケース、要件）",
      "テスト技法の適用状況",
      "使用しているプログラミング言語",
    ],
    answer: [2, 3],
    explanation: explanation.review.checkListUseOnReview,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
テスト自動実行ツールの主な目的として正しいものを2つ選択せよ。
    `,
    options: [
      "全ての障害を自動で修正する",
      "複数の環境で同じテストを実行する",
      "設計書を自動生成する",
      "手動では不可能なテストを実行する",
      "テストデータを自動削除する",
    ],
    answer: [1, 3],
    explanation: explanation.testToolAndAutomation.testToolType,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
品質特性「性能効率」に対するテストの実施方法として適切なものを2つ選択せよ。
    `,
    options: [
      "ストレステストの実施",
      "SQLインジェクションの確認",
      "応答時間の計測",
      "誤入力に対する警告表示の確認",
      "構成ファイルのバージョン管理",
    ],
    answer: [0, 2],
    explanation:
      explanation.softwareQualityFeatureTest.businessDomainTestQualityFeature,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
リスク軽減に向けたテストアナリストの行動として適切なものを2つ選択せよ。
    `,
    options: [
      "要件レビューに参加してプロダクトリスクの除去に寄与する",
      "テスト対象の信頼性を確認せずに先に進める",
      "合否基準が曖昧なテストケースを多く作成する",
      "リスクの高い業務機能に特化したテスト技法を用いる",
      "テスト計画に基づき探索的テストのみを実施する",
    ],
    answer: [0, 3],
    explanation: explanation.testAnalystTasksInRiskBasedTest.riskMitigation,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
以下のうち、チェックリストベースドテストの特徴として正しいものを2つ選択せよ。
    `,
    options: [
      "過去の障害傾向を再利用する",
      "必ず事前に決められた実行順序でテストを行う",
      "網羅性の確認や抜け漏れ防止に有効である",
      "テスト対象の変更には不向きである",
      "定型的な内容や基準に従った確認に適する",
    ],
    answer: [2, 4],
    explanation: explanation.testTechniques.experienceBasedTestTechniques,
    aiGenerated: true,
    type: "multiple",
  },
  {
    sentence: `
以下のうち、「保守性」品質特性に関して、間接的に確認可能なテスト活動として適切なものを1つ選択せよ。
    `,
    options: [
      "仕様書の文書量を増やす",
      "変更に対する回帰テストの実施",
      "コードのバージョンを削除する",
      "開発スケジュールの短縮",
    ],
    answer: 1,
    explanation:
      explanation.softwareQualityFeatureTest.businessDomainTestQualityFeature,
    aiGenerated: true,
    type: "single",
  },
];
